[{"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\index.js":"1","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\App.js":"2","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\history.js":"3","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Error.js":"4","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Home.js":"5","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\ReviewAlert.js":"6","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\EditAlert.js":"7","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Header.js":"8","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\modals\\SourceLinkModal.js":"9","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\AccordianTitles.js":"10","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Trendline.js":"11","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\IPDensity.js":"12","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\index.js":"13","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\App.js":"14","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\history.js":"15","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\components\\Home.js":"16","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\components\\Header.js":"17","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\components\\CurationsPie.js":"18","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\index.js":"19","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\App.js":"20","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\history.js":"21","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\components\\Home.js":"22","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\components\\Header.js":"23","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\components\\NeoVis.js":"24"},{"size":248,"mtime":1660014615820,"results":"25","hashOfConfig":"26"},{"size":660,"mtime":1660014615813,"results":"27","hashOfConfig":"26"},{"size":90,"mtime":1660014615819,"results":"28","hashOfConfig":"26"},{"size":178,"mtime":1660014615815,"results":"29","hashOfConfig":"26"},{"size":14546,"mtime":1660894892540,"results":"30","hashOfConfig":"26"},{"size":20741,"mtime":1660014615817,"results":"31","hashOfConfig":"26"},{"size":54540,"mtime":1660014615815,"results":"32","hashOfConfig":"26"},{"size":502,"mtime":1660014615816,"results":"33","hashOfConfig":"26"},{"size":9669,"mtime":1660014615818,"results":"34","hashOfConfig":"26"},{"size":2470,"mtime":1660089421077,"results":"35","hashOfConfig":"26"},{"size":9708,"mtime":1660877011221,"results":"36","hashOfConfig":"26"},{"size":5390,"mtime":1660895236073,"results":"37","hashOfConfig":"26"},{"size":248,"mtime":1660014615820,"results":"38","hashOfConfig":"39"},{"size":369,"mtime":1662151722244,"results":"40","hashOfConfig":"39"},{"size":90,"mtime":1660014615819,"results":"41","hashOfConfig":"39"},{"size":5827,"mtime":1665695738859,"results":"42","hashOfConfig":"39"},{"size":522,"mtime":1666043168176,"results":"43","hashOfConfig":"39"},{"size":14643,"mtime":1666725826173,"results":"44","hashOfConfig":"39"},{"size":248,"mtime":1660014615820,"results":"45","hashOfConfig":"46"},{"size":369,"mtime":1662151722244,"results":"47","hashOfConfig":"46"},{"size":90,"mtime":1660014615819,"results":"48","hashOfConfig":"46"},{"size":6776,"mtime":1667856299488,"results":"49","hashOfConfig":"46"},{"size":502,"mtime":1667238747364,"results":"50","hashOfConfig":"46"},{"size":1300,"mtime":1667854655799,"results":"51","hashOfConfig":"46"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1kb08c6",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"aonhzm",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"1swt9x4",{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\index.js",[],["112","113"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\App.js",["114"],"import React from 'react';\r\nimport Home from './components/Home';\r\nimport Error from './components/Error';\r\nimport EditAlert from './components/EditAlert'\r\nimport ReviewAlert from './components/ReviewAlert';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport history from '../src/history';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/review\" exact component={ReviewAlert} />\r\n          <Route path=\"/edit/:id\" exact component={EditAlert} />\r\n        </Switch>\r\n      </Router> \r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\history.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Error.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Home.js",["115","116","117"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\ReviewAlert.js",["118","119"],"import React, {Component} from 'react';\r\nimport { List, Header, Form, Button, Segment, Dimmer, \r\n   Loader, Pagination, Dropdown, Modal, Icon } from 'semantic-ui-react'\r\nimport axios from \"axios\";\r\n\r\nexport default class ReviewAlert extends Component {\r\n   constructor(props) {\r\n     super(props);\r\n     this.state = {\r\n         user: \"\",\r\n         alerts: [],\r\n         loading: false,\r\n         activePage: 1,\r\n         totalPages: 1,\r\n         subheaderOptions: [],\r\n         headingOptions: [],\r\n         modalOpen: false,\r\n         submitHeaderDisabled: false,\r\n         alertUpdationConfirmed: false,\r\n         emailOptions: []\r\n     }\r\n   }\r\n\r\n   componentDidMount = () => {\r\n      let defaultSubheadingOptions = [\r\n         { key: 'all option vants', value: 'all option vants', text: 'all option vants' },\r\n         { key: 'mergers and acquisitions', value: 'mergers and acquisitions', text: 'mergers and acquisitions' },\r\n         { key: 'covid 19', value: 'covid 19', text: 'covid 19' },\r\n         { key: 'genevant', value: 'genevant', text: 'genevant' },\r\n         { key: 'pharma ipo developments', value: 'pharma ipo developments', text: 'pharma ipo developments' },\r\n         { key: 'mergers and acquisitions competitors', value: 'mergers and acquisitions competitors', text: 'mergers and acquisitions competitors' },\r\n         { key: 'conferences', value: 'conferences', text: 'conferences' },\r\n         { key: 'pharma regulatory updates', value: 'pharma regulatory updates', text: 'pharma regulatory updates' },\r\n         { key: 'crl fda news', value: 'crl fda news', text: 'crl fda news' },\r\n         { key: 'payer updates', value: 'payer updates', text: 'payer updates' },\r\n         { key: 'pharma exec updates', value: 'pharma exec updates', text: 'pharma exec updates' },\r\n         { key: 'elt gene therapy', value: 'elt gene therapy', text: 'elt gene therapy' },\r\n         { key: 'masayuki rna activity', value: 'masayuki rna activity', text: 'masayuki rna activity' },\r\n         { key: 'endometriosis news', value: 'endometriosis news', text: 'endometriosis news' },\r\n         { key: 'uterine fibroids news', value: 'uterine fibroids news', text: 'uterine fibroids news' },\r\n         { key: 'prostate cancer news', value: 'prostate cancer news', text: 'prostate cancer news' },\r\n         { key: 'zanubrutinib news', value: 'zanubrutinib news', text: 'zanubrutinib news' },\r\n         { key: 'jcr 141 news', value: 'jcr 141 news', text: 'jcr 141 news' },\r\n         { key: 'bardoxolone methyl news', value: 'bardoxolone methyl news', text: 'bardoxolone methyl news' },\r\n         { key: 'overactive bladder news', value: 'overactive bladder news', text: 'overactive bladder news' },\r\n         { key: \"women's health news\", value: \"women's health news\", text: \"women's health news\" },\r\n         { key: 'high priority news', value: 'high priority news', text: 'high priority news' },\r\n         { key: 'tlr agonist updates', value: 'tlr agonist updates', text: 'tlr agonist updates' },\r\n         { key: 'menin inhibitors updates', value: 'menin inhibitors updates', text: 'menin inhibitors updates' },\r\n         { key: 'rna activity updates', value: 'rna activity updates', text: 'rna activity updates' },\r\n         { key: 'cancer updates', value: 'cancer updates', text: 'cancer updates' },\r\n         { key: 'protac updates', value: 'protac updates', text: 'protac updates' },\r\n         { key: 'peptide activity updates', value: 'peptide activity updates', text: 'peptide activity updates' },\r\n         { key: 'chk1 assets search', value: 'chk1 assets search', text: 'chk1 assets search' },\r\n         { key: 'atr assets search', value: 'atr assets search', text: 'atr assets search' },\r\n         { key: 'wee1 assets search', value: 'wee1 assets search', text: 'wee1 assets search' },\r\n         { key: 'ccr8 assets search', value: 'ccr8 assets search', text: 'ccr8 assets search' },\r\n         { key: 'wt1 assets search', value: 'wt1 assets search', text: 'wt1 assets search' },\r\n         { key: 'ksp1007 updates', value: 'ksp1007 updates', text: 'ksp1007 updates' },\r\n         { key: 'chk1-assets-search', value: 'chk1-assets-search', text: 'chk1-assets-search' },\r\n         { key: 'ccr8-assets-search', value: 'ccr8-assets-search', text: 'ccr8-assets-search' },\r\n         { key: 'wt1-assets-search', value: 'wt1-assets-search', text: 'wt1-assets-search' },\r\n         { key: 'iga nephropathy updates', value: 'iga nephropathy updates', text: 'iga nephropathy updates' },\r\n         { key: 'pfizer updates', value: 'pfizer updates', text: 'pfizer updates' },\r\n         { key: 'bipolar disorder news alerts', value: 'bipolar disorder news alerts', text: 'bipolar disorder news alerts' },\r\n         { key: 'epilepsy news alerts', value: 'epilepsy news alerts', text: 'epilepsy news alerts' },\r\n         { key: \"parkinson's disease news alerts\", value: \"parkinson's disease news alerts\", text: \"parkinson's disease news alerts\" },\r\n         { key: \"schizophrenia news alerts\", value: \"schizophrenia news alerts\", text: \"schizophrenia news alerts\"},\r\n         { key: \"historical related stories\", value: \"historical related stories\", text: \"historical related stories\" },\r\n         { key: \"related stories | vector alerts\", value: \"related stories | vector alerts\", text: \"related stories | vector alerts\" },\r\n         { key: \"academic-updates\", value: \"academic-updates\", text: \"academic-updates\" },\r\n         { key: \"academic updates\", value: \"academic updates\", text: \"academic updates\" },\r\n      ]\r\n      this.setState({\r\n         subheaderOptions: defaultSubheadingOptions\r\n      })\r\n   }\r\n\r\n   handlePaginationChange = async (e, { activePage }) => {\r\n      console.log('activePage in handlepagination change', activePage)\r\n      this.setState({ activePage })\r\n\r\n      this.handleFetchAlerts();\r\n    }\r\n\r\n   handleInputChange = (e) => {\r\n      this.setState({\r\n        ...this.state,\r\n        error: false,\r\n        [e.target.name]: e.target.value\r\n      })\r\n   }\r\n\r\n   handleFetchAlerts = () => {\r\n      this.setState({\r\n         loading: true\r\n      }, async () => {\r\n         const response = await axios\r\n            .post('http://localhost:5000/alerts', this.state)\r\n            //.post('http://10.115.1.185:8082/alerts')\r\n            //.post(`http://${window.location.hostname}:5000/alerts`, this.state)\r\n            .catch(err => {\r\n               console.log(\"error in Axios request\", err.message);\r\n            })\r\n            console.log(\"response\", response)\r\n\r\n         let preparedSubheadings = this.prepareSubheadingOptions(response.data.subheadings)\r\n         let defaultSubheadingOptions = this.state.subheaderOptions;\r\n         let updatedSubheadingOptions = defaultSubheadingOptions.concat(preparedSubheadings);\r\n         \r\n         let preparedHeadings = this.prepareHeadingOptions(response.data.headings);\r\n         let emailOptions  = this.prepareEmailOptions(response.data.emails)\r\n\r\n         this.setState({\r\n            alerts: response.data.alerts,\r\n            totalPages: response.data.count,\r\n            subheaderOptions: updatedSubheadingOptions,\r\n            headingOptions: preparedHeadings,\r\n            emailOptions,\r\n            loading: false\r\n         })\r\n      })\r\n   }\r\n\r\n   prepareEmailOptions = (emailOptions) => {\r\n      let preparedEmailOptions = [];\r\n      for(let option of emailOptions) {\r\n         let object = {};\r\n         object.key = option[0];\r\n         object.text = option[0];\r\n         object.value = option[0];\r\n\r\n         if(option[0]!=null) preparedEmailOptions.push(object);\r\n      }\r\n\r\n      return preparedEmailOptions;\r\n   }\r\n\r\n   prepareSubheadingOptions = (subheadingOptions) => {\r\n      let preparedSubheadinOptions = [];\r\n      for(let option of subheadingOptions) {\r\n         let object = {};\r\n         object.key = option[0];\r\n         object.text = option[0];\r\n         object.value = option[0];\r\n\r\n         if(option[0]!=null) preparedSubheadinOptions.push(object);\r\n      }\r\n\r\n      return preparedSubheadinOptions;\r\n   }\r\n\r\n   prepareHeadingOptions = (headingOptions) => {\r\n      let preparedHeadingOptions = [];\r\n      for(let option of headingOptions) {\r\n         let object = {};\r\n         object.key = option[0]\r\n         object.text = option[0];\r\n         object.value = option[0];\r\n\r\n         if(option[0]!=null) preparedHeadingOptions.push(object);\r\n      }\r\n\r\n      return preparedHeadingOptions;\r\n   }\r\n\r\n   handleChange = (e, data) => {\r\n      // console.log(\"i\", data.name);\r\n      // console.log(\"val\", data.value);\r\n      let alertsArray = this.state.alerts;\r\n      alertsArray[data.name][3] = data.value;\r\n\r\n      this.setState({\r\n         alerts: alertsArray\r\n      })\r\n   }\r\n\r\n   cleanDate = (date) => {\r\n      let dateArray = date.split(\" \")\r\n      return dateArray.slice(0, 4);\r\n   }\r\n\r\n   handleModalOpen = () => {\r\n      this.setState({\r\n         modalOpen: true\r\n      })\r\n   }\r\n\r\n   handleModalClose = () => {\r\n      this.setState({\r\n         modalOpen: false\r\n      })\r\n   }\r\n\r\n   handleConfirmClick = async() => {\r\n      //write to SQL with updated values of subheader and header\r\n      this.setState({\r\n         submitHeaderDisabled: true\r\n      }, async() => {\r\n         for(let alert of this.state.alerts) {\r\n            const response = await axios\r\n               .post('http://localhost:5000/update_alert', alert)\r\n               //.post(`http://${window.location.hostname}:5000/update_alert`, alert)\r\n               .catch(err => {\r\n                  console.log(\"error in Axios request\", err.message);\r\n               })\r\n            console.log(\"response\", response)\r\n         }\r\n         this.setState({\r\n            modalOpen: false,\r\n            alertUpdationConfirmed: true\r\n         })\r\n      })\r\n   }\r\n\r\n   handleConfirmationResponseModalClose = () => {\r\n      this.setState({ alertUpdationConfirmed: false})\r\n   }\r\n\r\n   renderConfirmationResponseModal = () => {\r\n      console.log(\"inside renderConfirmationResponseModal\")\r\n      return (\r\n        <Modal\r\n          open={this.state.alertUpdationConfirmed}\r\n          onClose={this.handleConfirmationResponseModalClose}\r\n          closeIcon\r\n          size='small'\r\n          >\r\n            <Modal.Content>\r\n              <h2 style={{ textAlign: 'center'}}>\r\n                Alerts Updated! <Icon color=\"green\" name=\"check circle\" />\r\n              </h2>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n            <Button onClick={() => this.handleConfirmationResponseModalClose()}>\r\n              Close\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      )\r\n    }\r\n\r\n   handleHeaderChange = (e, data) => {\r\n      let alertsArray = this.state.alerts;\r\n\r\n      let updatedAlerts = [];\r\n      for(let alert of alertsArray) {\r\n         alert[4] = data.value;\r\n         updatedAlerts.push(alert)\r\n      }\r\n\r\n      this.setState({\r\n         alerts: updatedAlerts\r\n      })\r\n   }\r\n\r\n   handleEmailChange = (e, data) => {\r\n      let alertsArray = this.state.alerts;\r\n\r\n      let updatedAlerts = [];\r\n      for(let alert of alertsArray) {\r\n         alert[5] = data.value;\r\n         updatedAlerts.push(alert)\r\n      }\r\n\r\n      this.setState({\r\n         alerts: updatedAlerts\r\n      })\r\n   }\r\n\r\n   handleHeadingAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        headingOptions: [{ text: value, value }, ...prevState.headingOptions],\r\n      }))\r\n   }\r\n\r\n   handleEmailAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        emailOptions: [{ text: value, value }, ...prevState.emailOptions],\r\n      }))\r\n   }\r\n\r\n   handleSubheaderAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        subheaderOptions: [{ text: value, value }, ...prevState.subheaderOptions],\r\n      }))\r\n   }\r\n\r\n   downloadKeywordsTextFile = (textContents) => {\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([textContents], {\r\n         type: \"text/plain\"\r\n      })\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = \"keywords.txt\";\r\n      document.body.appendChild(element);\r\n      element.click();\r\n   };\r\n\r\n   downloadAliasesTextFile = (textContents) => {\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([textContents], {\r\n         type: \"text/plain\"\r\n      })\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = \"aliases.txt\";\r\n      document.body.appendChild(element);\r\n      element.click();\r\n   };\r\n\r\n   render() {\r\n      console.log(\"state in review alert\", this.state);\r\n      return (\r\n         <div>\r\n            {this.state.loading && (\r\n               <Segment style={{ marginTop: '40px', height: '600px', marginRight: \"50px\", marginLeft: \"50px\"}}>\r\n                  <Dimmer active inverted>\r\n                     <Loader inverted content='Loading' />\r\n                  </Dimmer>\r\n              </Segment>\r\n            )}\r\n            {!this.state.loading && (\r\n               <div style={{marginTop: \"10px\", marginLeft: \"40px\"}}>\r\n                  <Header style={{ textAlign: \"center\", display: \"inline\" }}>\r\n                     Review Alerts\r\n                  </Header>\r\n                  <Button \r\n                     primary \r\n                     style={{ marginLeft: \"75%\", marginTop: \"20px\" }}\r\n                     onClick={() => {window.location.href=\"/\"}}\r\n                  >\r\n                     Back\r\n                  </Button>\r\n                  <Pagination\r\n                     style={{ marginTop: \"10px\" }} \r\n                     defaultActivePage={this.state.activePage} \r\n                     totalPages={this.state.totalPages} \r\n                     onPageChange={this.handlePaginationChange} \r\n                  />\r\n                  <Form style={{ marginTop: \"20px\"}}>\r\n                     <Form.Field inline>\r\n                        <label><b>User</b></label>\r\n                        <input\r\n                           name=\"user\"\r\n                           style={{ marginLeft: \"10px\", minWidth: \"200px\"}} \r\n                           placeholder=\"Enter user\"\r\n                           onChange={this.handleInputChange}\r\n                           value={this.state.user}\r\n                        />\r\n                        <Button \r\n                           style={{marginLeft: \"30px\"}} \r\n                           primary\r\n                           onClick={this.handleFetchAlerts}\r\n                        >\r\n                           Fetch Alerts\r\n                        </Button>\r\n\r\n                        {/* Update header modal */}\r\n                        <Modal\r\n                           size='small'\r\n                           closeIcon\r\n                           trigger={<Button \r\n                              style={{float: \"right\", marginRight: \"115px\"}} \r\n                              primary\r\n                           >\r\n                              Save updates\r\n                           </Button>}\r\n                           onOpen={this.handleModalOpen}\r\n                           onClose={this.handleModalClose}\r\n                           open={this.state.modalOpen}\r\n                        >\r\n                           <Header content='Confirm grouping' />\r\n                           <Modal.Content>\r\n                           <Form>\r\n                              <Form.Field inline>\r\n                              <label style={{ marginRight: \"77px\"}}>Heading</label>\r\n                              <Dropdown\r\n                                 name= 'header'\r\n                                 placeholder= 'Select header'\r\n                                 selection\r\n                                 search\r\n                                 options={this.state.headingOptions} \r\n                                 onChange={this.handleHeaderChange}\r\n                                 allowAdditions\r\n                                 onAddItem={this.handleHeadingAddition}\r\n                              />\r\n                              </Form.Field>\r\n\r\n                              <Form.Field inline>\r\n                              <label style={{ marginRight: \"94px\"}}>Email</label>\r\n                              <Dropdown\r\n                                 name= 'email'\r\n                                 placeholder= 'Select email'\r\n                                 selection\r\n                                 search\r\n                                 options={this.state.emailOptions} \r\n                                 onChange={this.handleEmailChange}\r\n                                 allowAdditions\r\n                                 onAddItem={this.handleEmailAddition}\r\n                              />\r\n                              </Form.Field> \r\n                           </Form>\r\n                           </Modal.Content>\r\n                           <Modal.Actions>\r\n                              <Button color='red' onClick={() => this.handleModalClose()}>\r\n                                 <Icon name='remove' /> Cancel\r\n                              </Button>\r\n                              <Button color='green' disabled={this.state.submitHeaderDisabled} onClick={() => this.handleConfirmClick()}>\r\n                                 <Icon name='checkmark' /> Confirm\r\n                              </Button>\r\n                           </Modal.Actions>\r\n                        </Modal>\r\n                        </Form.Field>\r\n                  </Form>\r\n\r\n                  <List divided relaxed style={{ marginTop: \"40px\"}}>\r\n                     {this.state.alerts.map((item, i) => {\r\n                        return (\r\n                           <>\r\n                              <List.Item key={i}>\r\n                                 <List.Icon name='alarm' size='large' verticalAlign='middle' />\r\n                                 <List.Content>\r\n                                 <List.Header as='a'>{item[0]}</List.Header>\r\n                                 <List.Description as='a' style={{ marginTop: \"2px\"}}>{item[9]}</List.Description>\r\n                                 <List.Description as='a'>\r\n                                    {/* {item[7]} */}\r\n                                    <a onClick={() => this.downloadKeywordsTextFile(item[7])}>keywords.txt</a>\r\n                                 </List.Description>\r\n                                 <List.Description as='a'>\r\n                                    {/* {item[8]} */}\r\n                                    <a onClick={() => this.downloadAliasesTextFile(item[8])}>aliases.txt</a>\r\n                                 </List.Description>\r\n                                 <List.Description as='a'></List.Description>\r\n                                 <List.Description as='a'>{item[1]}</List.Description>\r\n                                 <List.Description as='a'>{this.cleanDate(item[2])}</List.Description>\r\n                                 </List.Content>\r\n                              </List.Item>\r\n                              <Button \r\n                                 style={{ float: 'right', marginRight: \"120px\", marginBottom: \"50px\"}} \r\n                                 primary\r\n                                 onClick={() => {window.location.href=`edit/${item[6]}`}}\r\n                              >Edit</Button>\r\n                              <Dropdown\r\n                                 style={{ marginTop: \"10px\", marginBottom: \"10px\", marginLeft: \"25px\"}}\r\n                                 name= {i}\r\n                                 placeholder='Select subheader'  \r\n                                 selection\r\n                                 search\r\n                                 options={this.state.subheaderOptions} \r\n                                 onChange={this.handleChange}\r\n                                 value={item[3]}\r\n                                 allowAdditions\r\n                                 onAddItem={this.handleSubheaderAddition}\r\n                              />\r\n                              \r\n                           </>\r\n                           \r\n                        );\r\n                     })}\r\n                  </List>\r\n                  {this.state.alerts.length>0 && (\r\n                     <Pagination\r\n                        style={{ marginTop: \"10px\", marginBottom: \"30px\" }} \r\n                        defaultActivePage={this.state.activePage} \r\n                        totalPages={this.state.totalPages} \r\n                        onPageChange={this.handlePaginationChange} \r\n                     />\r\n                  )}\r\n                  \r\n\r\n                  {this.state.alertUpdationConfirmed && this.renderConfirmationResponseModal()}\r\n               </div>\r\n            )}\r\n            \r\n         </div>\r\n      )\r\n   }\r\n}","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\EditAlert.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"import React, {Component} from 'react';\r\nimport { Grid, Header, Icon, Select, Form, Button, Modal, Input, Radio, \r\n   TextArea, Popup, Segment, Divider, Dropdown, Dimmer, Loader } from 'semantic-ui-react'\r\nimport axios from \"axios\";\r\nimport SourceLinkModal from './modals/SourceLinkModal';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport moment from 'moment';\r\nconst _ = require(\"lodash\");\r\n\r\nexport default class EditAlert extends Component {\r\n   constructor(props) {\r\n     super(props);\r\n     this.state = {\r\n         omeId: \"\",\r\n         loading: false,\r\n         alert: [],\r\n         modalOpen: false,\r\n         sectionModalOpen: false,\r\n         AutomationModalOpen: false,\r\n         sourceLinkModalOpen: false,\r\n         alertDate: null,\r\n         keywords: [],\r\n         aliases: [],\r\n         lemmapp: \"\",\r\n         searchtype: \"\",\r\n         sourceClass: \"\",\r\n         user: \"\",\r\n         emailAlert: true,\r\n         summary: false,\r\n         relstories: false,\r\n         hisrelstories: false,\r\n         trendnews: false,\r\n         synrel: false,\r\n         mddar: false,\r\n         irrtextrem: false,\r\n         marelmat: false,\r\n         alertTitle: \"\",\r\n         alertDate: \"\",\r\n         sourceClassOptions: [],\r\n         sourceLinkOptions: [],\r\n         negsearchbool: \"\",\r\n         aliaslem: \"\",\r\n         senWoNegBool: false,\r\n         negalias: \"\",\r\n         negaliaslemm: \"\",\r\n         sourceLink: \"\",\r\n         alertCreationConfirmed: false,\r\n         createClicked: false,\r\n         error: false,\r\n         keywordOptions: [],\r\n         aliasesOptions: [],\r\n         loading: false,\r\n         includeLinks: [],\r\n         excludeLinks: [],\r\n         emailSubject: \"\",\r\n         subheadingOptions: [],\r\n         subheader: \"\",\r\n         subheaderOrder: \"\",\r\n         header: \"\",\r\n         headingOptions: [],\r\n         recepientList: \"\",\r\n         frequency: [],\r\n         frequencyOptions: []\r\n     }\r\n   }\r\n\r\n   componentDidMount = () => {\r\n      let omeId = this.props.match.params.id;\r\n      this.setState({\r\n         omeId,\r\n         loading: true\r\n      }, async() => {\r\n         let response = await axios\r\n         .post('http://localhost:5000/alert', this.state)\r\n         .catch(err => {\r\n            console.log(\"error in Axios request\", err.message);\r\n         })\r\n         console.log(\"response\", response)\r\n         let alert = response.data.alert[0];\r\n         let keywords = alert[7].split(',');\r\n\r\n         let currentKeywordOptions = this.state.keywordOptions;\r\n         for(let key of keywords) {\r\n            let obj = {};\r\n            obj.key = key;\r\n            obj.text = key;\r\n            obj.value = key\r\n            currentKeywordOptions.push(obj)\r\n         }\r\n         console.log(\"currentKeywordOptions\", currentKeywordOptions)\r\n         \r\n         let aliases = alert[8].split(',')\r\n         let currentAliasesOptions = this.state.aliasesOptions;\r\n         for(let alias of aliases) {\r\n            let obj = {};\r\n            obj.key = alias;\r\n            obj.text = alias;\r\n            obj.value = alias\r\n            currentAliasesOptions.push(obj)\r\n         }\r\n\r\n         let searchtype = alert[9];\r\n         let sourceClass = alert[10];\r\n         let user = alert[11];\r\n         let emailAlert = alert[12];\r\n         if (emailAlert == \"yes\") {\r\n            emailAlert= true\r\n         } else {\r\n            emailAlert = false\r\n         }\r\n         let alertDate = moment(alert[2]);\r\n         alertDate = alertDate.toISOString().split('T')[0];\r\n         console.log(\"alertDate\", alertDate);\r\n\r\n         let lemmapp = alert[13];\r\n         let summary = alert[14];\r\n         if (summary == 1)\r\n            summary = true;\r\n         else \r\n            summary= false;\r\n         \r\n         let relstories = alert[15];\r\n         if (relstories == 1)\r\n            relstories = true;\r\n         else \r\n            relstories= false;\r\n\r\n         let hisrelstories = alert[16];\r\n         if (hisrelstories == 1)\r\n            hisrelstories = true;\r\n         else \r\n            hisrelstories= false;\r\n\r\n         let trendnews = alert[17];\r\n         if (trendnews == 1)\r\n            trendnews = true;\r\n         else \r\n            trendnews= false;\r\n\r\n         let synrel = alert[18];\r\n         if (synrel == 1)\r\n            synrel = true;\r\n         else \r\n            synrel= false;\r\n\r\n         let mddar = alert[19];\r\n         if (mddar == 1)\r\n            mddar = true;\r\n         else \r\n            mddar= false;\r\n         \r\n         let irrtextrem = alert[20];\r\n         if (irrtextrem == 1)\r\n            irrtextrem = true;\r\n         else \r\n            irrtextrem= false;\r\n\r\n         let marelmat = alert[21];\r\n         if (marelmat == 1)\r\n            marelmat = true;\r\n         else \r\n            marelmat= false;\r\n         \r\n         let aliaslem = alert[22];\r\n         let negalias = alert[23];\r\n         let negsearchbool = alert[24];\r\n         let negaliaslemm = alert[25];\r\n         let senWoNegBool = alert[26];\r\n         if (senWoNegBool == \"yes\")\r\n            senWoNegBool = true\r\n         else\r\n            senWoNegBool = false\r\n\r\n         let emailSubject = alert[27];\r\n         let header = alert[28];\r\n         let subheader = alert[29];\r\n         let subheaderOrder = alert[30];\r\n         let frequency = alert[31];\r\n\r\n         if(frequency == \"\") {\r\n            frequency = []\r\n         } else if(frequency!=null && frequency.split(',').length==1) {\r\n            frequency = [frequency]\r\n         }\r\n\r\n         else if(frequency!=null && frequency.split(',').length>1) {\r\n            frequency = frequency.split(',')\r\n         }\r\n         let recepientList = alert[32];\r\n         let alertTitle = alert[33];\r\n         let includeLinks = alert[34]\r\n         let excludeLinks = alert[35];\r\n         console.log(\"includeLinks\", includeLinks)\r\n         \r\n\r\n         if(includeLinks == \"\") {\r\n            includeLinks = []\r\n         } else if(includeLinks!=null && includeLinks.split(',').length==1) {\r\n            includeLinks = [includeLinks]\r\n         } else if(includeLinks!=null && includeLinks.split(',').length>1) {\r\n            includeLinks = includeLinks.split(',')\r\n         }\r\n\r\n         if(excludeLinks == \"\") {\r\n            excludeLinks = []\r\n         } else if(excludeLinks!=null && excludeLinks.split(',').length==1) {\r\n            excludeLinks = [excludeLinks]\r\n         } else if(excludeLinks!=null && excludeLinks.split(',').length>1) {\r\n            excludeLinks = excludeLinks.split(',')\r\n         }\r\n\r\n         this.setState({\r\n            alert,\r\n            keywords,\r\n            aliases,\r\n            searchtype,\r\n            sourceClass,\r\n            user,\r\n            emailAlert,\r\n            alertTitle,\r\n            alertDate,\r\n            lemmapp,\r\n            summary,\r\n            relstories,\r\n            hisrelstories,\r\n            trendnews,\r\n            synrel,\r\n            mddar,\r\n            irrtextrem,\r\n            marelmat,\r\n            aliaslem,\r\n            negalias,\r\n            negsearchbool,\r\n            negaliaslemm,\r\n            senWoNegBool,\r\n            emailSubject,\r\n            header,\r\n            subheader,\r\n            subheaderOrder,\r\n            frequency,\r\n            recepientList,\r\n            keywordOptions: currentKeywordOptions,\r\n            aliasesOptions: currentAliasesOptions,\r\n            includeLinks,\r\n            excludeLinks\r\n         }, async() => {\r\n            response = await axios\r\n               .get('http://localhost:5000/keys')\r\n               .catch(err => {\r\n                  console.log(\"error in Axios request\", err.message);\r\n               })\r\n               \r\n               const givenAliases = response.data.aliases;\r\n               const givenKeywords = response.data.keywords;\r\n               const givenSubHeadings = response.data.subheadings;\r\n               const givenHeadings = response.data.headings;\r\n         \r\n               let preparedAliases = [];\r\n               let preparedKeywords = [];\r\n         \r\n               //every alias value in MySQL is a combination of aliases seperated by commas, so splitting them and pushing them into a seperate array\r\n               for(let alias of givenAliases) {\r\n                 if(alias[0]!=null) {\r\n                   let aliasElementArray = alias[0].split(',');\r\n                   for (let elem of aliasElementArray) {\r\n                     preparedAliases.push(elem);\r\n                   }  \r\n                 }\r\n               }\r\n               preparedAliases = _.uniq(preparedAliases);\r\n         \r\n               for(let key of givenKeywords) {\r\n                 if(key[0]!=null) {\r\n                     let keyElementArray = key[0].split(',');\r\n                     for (let elem of keyElementArray) {\r\n                     preparedKeywords.push(elem);\r\n                     }  \r\n                 }\r\n               }\r\n               preparedKeywords = _.uniq(preparedKeywords);\r\n         \r\n               let aliasesOptions = this.state.aliasesOptions;\r\n               for(let i=0; i<preparedAliases.length; i++) {\r\n                 let object = {};\r\n                 object.key = i;\r\n                 object.text = preparedAliases[i];\r\n                 object.value = preparedAliases[i];\r\n                 aliasesOptions.push(object)\r\n               }\r\n         \r\n               let keywordOptions = this.state.keywordOptions;\r\n               for(let i=0; i<preparedKeywords.length; i++) {\r\n                 let object = {};\r\n                 object.key = i;\r\n                 object.text = preparedKeywords[i];\r\n                 object.value = preparedKeywords[i];\r\n                 keywordOptions.push(object)\r\n               }\r\n         \r\n               let subheadingsOptions = [];\r\n               for(let sub of givenSubHeadings) {\r\n                 let obj = {};\r\n                 obj.key = sub[0];\r\n                 obj.text = sub[0];\r\n                 obj.value = sub[0];\r\n         \r\n                 subheadingsOptions.push(obj)\r\n               }\r\n         \r\n               let headingOptions = [];\r\n               for(let sub of givenHeadings) {\r\n                 let obj = {};\r\n                 obj.key = sub[0];\r\n                 obj.text = sub[0];\r\n                 obj.value = sub[0];\r\n         \r\n                 headingOptions.push(obj)\r\n               }\r\n\r\n               const sourceClassOptions = [\r\n                  { key: 'all', value: 'all', text: 'ALL' },\r\n                  { key: 'pr', value: 'Press releases', text: 'Press releases' },\r\n                  { key: 'pmabs', value: 'Pub_Med Abstracts', text: 'Pub_Med Abstracts' },\r\n                  { key: 'pmctext', value: 'PMC_text', text: 'PMC_text' }\r\n               ];\r\n         \r\n               this.setState({\r\n                 ...this.state,\r\n                 keywordOptions,\r\n                 aliasesOptions,\r\n                 subheadingOptions: subheadingsOptions,\r\n                 headingOptions,\r\n                 sourceClassOptions,\r\n                 loading: false\r\n               }, async () => {\r\n                  //reading csv contents from public/data/link.csv\r\n                  const optionsData = await this.fetchCsv();\r\n                  const frequencyOptions = [\r\n                     { key: 'Monday', value: 'Monday', text: 'Monday' },\r\n                     { key: 'Tuesday', value: 'Tuesday', text: 'Tuesday' },\r\n                     { key: 'Wednesday', value: 'Wednesday', text: 'Wednesday' },\r\n                     { key: 'Thursday', value: 'Thursday', text: 'Thursday' },\r\n                     { key: 'Friday', value: 'Friday', text: 'Friday' },\r\n                     { key: 'Saturday', value: 'Saturday', text: 'Saturday' },\r\n                     { key: 'Sunday', value: 'Sunday', text: 'Sunday' },\r\n                     { key: 'Other', value: 'Other', text: 'Other' },\r\n                     { key: '1', value: '1', text: '1' },\r\n                     { key: '2', value: '2', text: '2' },\r\n                     { key: '3', value: '3', text: '3' },\r\n                     { key: '4', value: '4', text: '4' },\r\n                     { key: '5', value: '5', text: '5' },\r\n                     { key: '6', value: '6', text: '6' },\r\n                     { key: '7', value: '7', text: '7' },\r\n                     { key: '8', value: '8', text: '8' },\r\n                     { key: '9', value: '9', text: '9' },\r\n                     { key: '10', value: '10', text: '10' },\r\n                     { key: '11', value: '11', text: '11' },\r\n                     { key: '12', value: '12', text: '12' },\r\n                     { key: '13', value: '13', text: '13' },\r\n                     { key: '14', value: '14', text: '14' },\r\n                     { key: '15', value: '15', text: '15' },\r\n                     { key: '16', value: '16', text: '16' },\r\n                     { key: '17', value: '17', text: '17' },\r\n                     { key: '18', value: '18', text: '18' },\r\n                     { key: '19', value: '19', text: '19' },\r\n                     { key: '20', value: '20', text: '20' },\r\n                     { key: '21', value: '21', text: '21' },\r\n                     { key: '22', value: '22', text: '22' },\r\n                     { key: '23', value: '23', text: '23' },\r\n                     { key: '24', value: '24', text: '24' },\r\n                     { key: '25', value: '25', text: '25' },\r\n                     { key: '26', value: '26', text: '26' },\r\n                     { key: '27', value: '27', text: '27' },\r\n                     { key: '28', value: '28', text: '28' },\r\n                     { key: '29', value: '29', text: '29' },\r\n                     { key: '30', value: '30', text: '30' },\r\n                     { key: '31', value: '31', text: '31' },\r\n                  ]\r\n                  \r\n                  this.setState({\r\n                     sourceLinkOptions: optionsData,\r\n                     frequencyOptions\r\n                  })\r\n               })    \r\n         })\r\n      })\r\n   }\r\n\r\n   handleKeywordsAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n        keywordOptions: [{ text: value, value }, ...prevState.keywordOptions],\r\n      }))\r\n   }\r\n\r\n   handleKeywordsFile = (e) => {\r\n      e.preventDefault();\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n         const text = e.target.result;\r\n         console.log(text);\r\n         let keywordsArray = text.split(';');\r\n         if(keywordsArray.length > 5) {\r\n            this.setState({\r\n            error: true,\r\n            createClicked: true\r\n            }, () => {\r\n            toast.error(\"Keywords count cannot exceed 50 words\", {\r\n               position: \"top-right\",\r\n               autoClose: 5000,\r\n               hideProgressBar: false,\r\n               closeOnClick: true,\r\n               pauseOnHover: true,\r\n               draggable: true,\r\n               progress: undefined\r\n            });\r\n            })\r\n            \r\n         } else {\r\n            let currentKeywordOptions = this.state.keywordOptions;\r\n            for(let key of keywordsArray) {\r\n               let obj = {};\r\n               obj.key = key;\r\n               obj.text = key;\r\n               obj.value = key\r\n               currentKeywordOptions.push(obj)\r\n            }\r\n            this.setState({\r\n               keywords: keywordsArray,\r\n               keywordOptions: currentKeywordOptions,\r\n               error: false,\r\n               createClicked: false\r\n            })\r\n         }\r\n      };\r\n      reader.readAsText(e.target.files[0]);\r\n   };\r\n\r\n   handleAliasAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n         aliasesOptions: [{ text: value, value }, ...prevState.aliasesOptions],\r\n      }))\r\n   }\r\n\r\n   handleAliasesFile = (e) => {\r\n      e.preventDefault();\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const text = e.target.result;\r\n        console.log(text);\r\n        let aliasesArray = text.split(';');\r\n        if(aliasesArray.length > 5) {\r\n          this.setState({\r\n            error: true,\r\n            createClicked: true\r\n          }, () => {\r\n            toast.error(\"Aliases count cannot exceed 50 words\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined\r\n            });\r\n          })\r\n        } else {\r\n          let currentAliasesOptions = this.state.aliasesOptions;\r\n          for(let alias of aliasesArray) {\r\n            let obj = {};\r\n            obj.key = alias;\r\n            obj.text = alias;\r\n            obj.value = alias\r\n            currentAliasesOptions.push(obj)\r\n          }\r\n          this.setState({\r\n            aliases: aliasesArray,\r\n            aliasesOptions: currentAliasesOptions,\r\n            error: false,\r\n            createClicked: false\r\n          })\r\n        }\r\n      };\r\n      reader.readAsText(e.target.files[0]);\r\n   };\r\n\r\n   handleSourceClassAddition = (e, { value }) => {\r\n      this.setState((prevState) => ({\r\n         sourceClassOptions: [{ text: value, value }, ...prevState.sourceClassOptions],\r\n         sourceClass: value\r\n      }))\r\n   }\r\n\r\n   handleAutomationModalClose = () => { this.setState({ AutomationModalOpen: false })}\r\n\r\n   prepareSourceLink(csv) {\r\n      console.log(\"Inside prepareSourceLink\");\r\n      var lines = csv.split(\"\\n\");\r\n      var sourceClassOptions = [];\r\n\r\n      var headers=lines[0].split(\",\");\r\n\r\n      for(var i=1; i<lines.length; i++) {\r\n        var sourceLinkObject = {};\r\n        var splitArray = lines[i].split(\",\");\r\n        \r\n        let text = splitArray[0];\r\n        let value = splitArray[1];\r\n\r\n        sourceLinkObject.key = i;\r\n        sourceLinkObject.value = value;\r\n        sourceLinkObject.text = value;\r\n        \r\n        sourceClassOptions.push(sourceLinkObject);\r\n      }\r\n      return sourceClassOptions;\r\n   }\r\n\r\n   async fetchCsv() {\r\n      console.log(\"inside fetchCSV\")\r\n      const response = await fetch('http://10.115.1.185:8082/data/link.csv');\r\n      console.log(\"response\", response)\r\n      const reader = response.body.getReader();\r\n      const result = await reader.read();\r\n      const decoder = new TextDecoder('utf-8');\r\n      const csv = decoder.decode(result.value);\r\n      console.log('csv', csv);\r\n      return this.prepareSourceLink(csv);\r\n   }\r\n\r\n   handleChange = (e, data) => {\r\n      this.setState({\r\n         ...this.state,\r\n         [data.name]: data.value\r\n      });\r\n   };\r\n\r\n   addSelectedSourceLinkToState = (includeLinks, excludeLinks) => {\r\n      console.log(\"inside addSelectedSourceLinkToState\")\r\n      this.setState({\r\n        includeLinks,\r\n        excludeLinks\r\n      })\r\n   }\r\n\r\n   handleAutomationModalOpen = () => { this.setState({ AutomationModalOpen: true })}\r\n   handleSectionModalClose = () => { this.setState({ sectionModalOpen: false })}\r\n   handleSectionModalOpen = () => { this.setState({ sectionModalOpen: true })}\r\n\r\n   handleInputChange = (e) => {\r\n      this.setState({\r\n        ...this.state,\r\n        error: false,\r\n        [e.target.name]: e.target.value,\r\n        //createClicked: false\r\n      })\r\n      if(e.target.name===\"keywords\" || e.target.name===\"aliases\") {\r\n        let keywordsArray = this.state.keywords;\r\n        let aliasesArray= this.state.aliases;\r\n        if(keywordsArray.length > 5 || aliasesArray.length > 5) {\r\n          this.setState({\r\n            error: true,\r\n            createClicked: true\r\n          }, () => {\r\n            toast.error(\"Keywords/Aliases count cannot exceed 50 words\", {\r\n              position: \"top-right\",\r\n              autoClose: 5000,\r\n              hideProgressBar: false,\r\n              closeOnClick: true,\r\n              pauseOnHover: true,\r\n              draggable: true,\r\n              progress: undefined\r\n            });\r\n          })\r\n        }\r\n      }\r\n   }\r\n\r\n   handleClose = () => {this.setState({ modalOpen: false })}\r\n   handleModalOpen = () => this.setState({ modalOpen: true });\r\n\r\n   downloadKeywordsTextFile = (textContents) => {\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([textContents], {\r\n         type: \"text/plain\"\r\n      })\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = \"keywords.txt\";\r\n      document.body.appendChild(element);\r\n      element.click();\r\n   };\r\n\r\n   downloadAliasesTextFile = (textContents) => {\r\n      const element = document.createElement(\"a\");\r\n      const file = new Blob([textContents], {\r\n         type: \"text/plain\"\r\n      })\r\n      element.href = URL.createObjectURL(file);\r\n      element.download = \"aliases.txt\";\r\n      document.body.appendChild(element);\r\n      element.click();\r\n   };\r\n\r\n   render() {\r\n      console.log(\"state in edit alert\", this.state);\r\n      const currentDate = moment().format('YYYY-MM-DD');\r\n      const currentTime = moment().format('HH:mm')\r\n      let currentDateTime = `${currentDate}T${currentTime}`\r\n      currentDateTime = currentDateTime.split(' ')[0];\r\n\r\n      const lemmAppOptions = [\r\n         { key: 'null', value: 'NULL', text: 'NULL' },\r\n         { key: 'al', value: 'all_lem', text: 'all_lem' },\r\n         { key: 'as', value: 'all_stem', text: 'all_stem' }\r\n      ]\r\n\r\n      const searchTypeOptions = [\r\n         { key: 'cooc', value: 'cooccurence', text: 'cooccurence' },\r\n         { key: 'coocdist', value: 'cooccurence_[KW_distance]', text: 'cooccurence_[KW_distance]' },\r\n         { key: 'std', value: 'standard', text: 'standard' },\r\n         { key: 'stdtitle', value: 'standard title', text: 'standard title' },\r\n         { key: 'coocmulali', value: 'cooccurrence_mult_alias', text: 'cooccurrence_mult_alias' },\r\n         { key: 'coocmulalidist', value: 'cooccurrence_mult_alias_[KW_DISTANCE]', text: 'cooccurrence_mult_alias_[KW_DISTANCE]' }\r\n      ]\r\n\r\n      const negSearchBoolOptions = [\r\n         { key: 'null', value: 'NULL', text: 'NULL' },\r\n         { key: 'and', value: 'AND', text: 'AND' },\r\n         { key: 'or', value: 'OR', text: 'OR' },\r\n         { key: 'notURL', value: 'NOT_URL', text: 'NOT_URL' }\r\n      ]\r\n\r\n      return (\r\n         <div>\r\n            {this.state.loading && (\r\n               <Segment style={{ marginTop: '40px', height: '600px', marginRight: \"50px\", marginLeft: \"50px\"}}>\r\n                  <Dimmer active inverted>\r\n                     <Loader inverted content='Loading' />\r\n                  </Dimmer>\r\n              </Segment>\r\n            )}\r\n            {!this.state.loading && (\r\n               <div style={{marginTop: \"10px\", marginLeft: \"40px\"}}>\r\n                  <Header style={{ textAlign: \"center\", display: \"inline\" }}>\r\n                     Edit Alert\r\n                  </Header>\r\n                  <Button \r\n                     primary \r\n                     style={{ marginLeft: \"75%\", marginTop: \"20px\" }}\r\n                     onClick={() => {window.location.href=\"/\"}}\r\n                  >\r\n                     Home\r\n                  </Button>\r\n\r\n                  <Grid columns={3} style={{ marginTop: \"20px\"}}>\r\n                     <Grid.Row>\r\n                        <Grid.Column>\r\n                           <Form style={{ marginRight: \"40px\"}}>\r\n                              <Form.Field inline error={this.state.error}>\r\n                                 <label style={{ marginRight: \"15px\"}}>Keywords</label>\r\n                                 (<a style={{ cursor: \"pointer\"}} onClick={() => this.downloadKeywordsTextFile(this.state.keywords)}>\r\n                                    keywords.txt\r\n                                 </a>)\r\n                                 <Dropdown\r\n                                    name = 'keywords'\r\n                                    placeholder='Enter keywords' \r\n                                    fluid \r\n                                    multiple \r\n                                    selection\r\n                                    search\r\n                                    options={this.state.keywordOptions} \r\n                                    onChange={this.handleChange}\r\n                                    value={this.state.keywords}\r\n                                    allowAdditions\r\n                                    onAddItem={this.handleKeywordsAddition}\r\n                                 />\r\n\r\n                                 <div style={{ marginTop: \"10px\"}}>\r\n                                    <Popup content='Keywords must be delimited by a semicolon (;)' trigger={\r\n                                       <input style={{border: \"none\", backgroundColor: \"transparent\", resize: \"none\", outline: \"none\"}} type=\"file\" \r\n                                          onChange={this.handleKeywordsFile} />\r\n                                    } />\r\n                                 </div>\r\n                                 </Form.Field>\r\n                \r\n                              </Form>\r\n                              <Form style={{ marginTop: \"40px\"}}>\r\n                                 <Form.Field inline style={{ marginRight: \"40px\"}} error={this.state.error}>\r\n                                    <label style={{ marginRight: \"15px\"}}>Aliases</label>\r\n                                    (<a style={{ cursor: \"pointer\"}} onClick={() => this.downloadAliasesTextFile(this.state.aliases)}>\r\n                                       aliases.txt\r\n                                    </a>)\r\n                                    <Dropdown\r\n                                       name = 'aliases'\r\n                                       placeholder='Enter aliases' \r\n                                       fluid \r\n                                       multiple \r\n                                       selection\r\n                                       search \r\n                                       options={this.state.aliasesOptions} \r\n                                       onChange={this.handleChange}\r\n                                       allowAdditions\r\n                                       onAddItem={this.handleAliasAddition}\r\n                                       value={this.state.aliases}\r\n                                    />\r\n                                    <Popup content='Aliases must be delimited by a semicolon (;)' trigger={\r\n                                       <div style={{ marginTop: \"10px\"}}>\r\n                                          <input style={{border: \"none\", backgroundColor: \"transparent\", resize: \"none\", outline: \"none\"}} type=\"file\" onChange={this.handleAliasesFile} />\r\n                                       </div>\r\n                                    } />\r\n                                 </Form.Field>\r\n                              </Form>\r\n                           </Grid.Column>\r\n                              <Form>\r\n                                 <Form.Field inline>\r\n                                    <label style={{ marginRight: \"20px\"}}>Search type</label>\r\n                                    <Select\r\n                                       style={{ marginLeft: \"18px\", minWidth:\"230px\"}} \r\n                                       placeholder='Select type'\r\n                                       name = 'searchtype'\r\n                                       value={this.state.searchtype}\r\n                                       options={searchTypeOptions} \r\n                                       onChange={this.handleChange}\r\n                                       search\r\n                                    />\r\n                                 </Form.Field>\r\n                                 <Segment>\r\n                                 <Grid columns={2} relaxed='very'>\r\n                                    <Grid.Column>\r\n                                       <Form.Field>\r\n                                       <label>Source class</label>\r\n                                       <Select \r\n                                          style={{ minWidth:\"100px\"}} \r\n                                          placeholder='Select source'\r\n                                          name = 'sourceClass'\r\n                                          search\r\n                                          value={this.state.sourceClass}\r\n                                          options={this.state.sourceClassOptions} \r\n                                          onChange={this.handleChange}\r\n                                          allowAdditions\r\n                                          onAddItem={this.handleSourceClassAddition}\r\n                                       />\r\n                                       </Form.Field>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column>\r\n                                       <SourceLinkModal \r\n                                          options={this.state.sourceLinkOptions}\r\n                                          parentCallback={this.addSelectedSourceLinkToState}\r\n                                          includeLinks={this.state.includeLinks}\r\n                                          excludeLinks={this.state.excludeLinks}\r\n                                       />\r\n                                    </Grid.Column>\r\n                                 </Grid>\r\n\r\n                                 <Divider vertical>OR</Divider>\r\n                                 </Segment>\r\n\r\n                                 <Modal\r\n                                    size='tiny'\r\n                                    closeIcon\r\n                                    trigger={<Button style={{ marginTop: \"17px\"}}>Automation efforts</Button>}\r\n                                    onOpen={this.handleAutomationModalOpen}\r\n                                    onClose={this.handleAutomationModalClose}\r\n                                    open={this.state.AutomationModalOpen}\r\n                                 >\r\n                                 <Header content='Automation efforts' />\r\n                                    <Modal.Content>\r\n                                       <Form style={{ marginBottom: \"20px\"}}>\r\n                                          <Form.Field inline >\r\n                                          <label ><b>Syntactical Relevance Model</b></label>\r\n                                          <Radio\r\n                                             toggle\r\n                                             name=\"synrel\"\r\n                                             style={{ marginLeft: \"250px\"}}\r\n                                             onChange={(e, data) => {\r\n                                                this.state.synrel = data.checked\r\n                                             }}\r\n                                             value={this.state.synrel}\r\n                                             defaultChecked={this.state.synrel}\r\n                                          />\r\n                                          </Form.Field>\r\n                                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                                             <label ><b>Main disease detection and Adjacency ranking</b></label>\r\n                                             <Radio\r\n                                                toggle\r\n                                                style={{ marginLeft: \"150px\"}}\r\n                                                name=\"mddar\"\r\n                                                onChange={(e, data) => {\r\n                                                this.state.mddar = data.checked\r\n                                                }}\r\n                                                value={this.state.mddar}\r\n                                                defaultChecked={this.state.mddar}\r\n                                             />\r\n                                          </Form.Field>\r\n                                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                                             <label ><b>Irrelevant text removal</b></label>\r\n                                             <Radio\r\n                                                toggle\r\n                                                name=\"irrtextrem\"\r\n                                                style={{ marginLeft: \"282px\"}}\r\n                                                onChange={(e, data) => {\r\n                                                this.state.irrtextrem = data.checked\r\n                                                }}\r\n                                                value={this.state.irrtextrem}\r\n                                                defaultChecked={this.state.irrtextrem}\r\n                                             />\r\n                                          </Form.Field>\r\n                                          <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                                             <label ><b>M&A relevancy matrix</b></label>\r\n                                             <Radio\r\n                                                toggle\r\n                                                style={{ marginLeft: \"285px\"}}\r\n                                                name=\"marelmat\"\r\n                                                onChange={(e, data) => {\r\n                                                this.state.marelmat = data.checked\r\n                                                }}\r\n                                                value={this.state.marelmat}\r\n                                                defaultChecked={this.state.marelmat}\r\n                                             />\r\n                                          </Form.Field>\r\n                                       </Form>\r\n                                       \r\n                                    </Modal.Content>\r\n                                    <Modal.Actions>\r\n                                       <Button color='green' onClick={this.handleAutomationModalClose}>\r\n                                          <Icon name='checkmark' /> OK\r\n                                       </Button>\r\n                                    </Modal.Actions>\r\n                                 </Modal>\r\n\r\n                                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                                 <Modal\r\n                                    size='tiny'\r\n                                    closeIcon\r\n                                    trigger={<Button style={{ marginTop: \"17px\"}}>Section Add-on</Button>}\r\n                                    onOpen={this.handleSectionModalOpen}\r\n                                    onClose={this.handleSectionModalClose}\r\n                                    open={this.state.sectionModalOpen}\r\n                                 >\r\n                                 <Header content='Section Add-ons' />\r\n                                    <Modal.Content>\r\n                                       <Form style={{ marginBottom: \"20px\"}}>\r\n                                       <Form.Field inline >\r\n                                       <label ><b>Summary</b></label>\r\n                                       <Radio\r\n                                          toggle\r\n                                          name=\"summary\"\r\n                                          style={{ marginLeft: \"353px\"}}\r\n                                          onChange={(e, data) => {\r\n                                             this.state.summary = data.checked\r\n                                          }}\r\n                                          value={this.state.summary}\r\n                                          defaultChecked={this.state.summary}\r\n                                       />\r\n                                       </Form.Field>\r\n                                       <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                                          <label ><b>Related stories</b></label>\r\n                                          <Radio\r\n                                             toggle\r\n                                             style={{ marginLeft: \"322px\"}}\r\n                                             name=\"relstories\"\r\n                                             onChange={(e, data) => {\r\n                                             this.state.relstories = data.checked\r\n                                             }}\r\n                                             value={this.state.relstories}\r\n                                             defaultChecked={this.state.relstories}\r\n                                          />\r\n                                       </Form.Field>\r\n                                       <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                                          <label ><b>Historical related stories</b></label>\r\n                                          <Radio\r\n                                             toggle\r\n                                             name=\"hisrelstories\"\r\n                                             style={{ marginLeft: \"266px\"}}\r\n                                             onChange={(e, data) => {\r\n                                             this.state.hisrelstories = data.checked\r\n                                             }}\r\n                                             value={this.state.hisrelstories}\r\n                                             defaultChecked={this.state.hisrelstories}\r\n                                          />\r\n                                       </Form.Field>\r\n                                       <Form.Field inline style={{ marginTop: \"5px\"}}>\r\n                                          <label ><b>Trending news</b></label>\r\n                                          <Radio\r\n                                             toggle\r\n                                             style={{ marginLeft: \"326px\"}}\r\n                                             name=\"trendnews\"\r\n                                             onChange={(e, data) => {\r\n                                             this.state.trendnews = data.checked\r\n                                             }}\r\n                                             value={this.state.trendnews}\r\n                                             defaultChecked={this.state.trendnews}\r\n                                          />\r\n                                       </Form.Field>\r\n                                       </Form>\r\n                                       \r\n                                    </Modal.Content>\r\n                                    <Modal.Actions>\r\n                                       <Button color='green' onClick={this.handleSectionModalClose}>\r\n                                          <Icon name='checkmark' /> OK\r\n                                       </Button>\r\n                                    </Modal.Actions>\r\n                                 </Modal>\r\n\r\n                                 <Form.Field inline style={{ marginTop: \"50px\"}}>\r\n                                    <label>Lemmatizer Application</label>\r\n                                    <Select\r\n                                       style={{ minWidth: \"185px\"}}\r\n                                       placeholder='Enter type'\r\n                                       name = 'lemmapp'\r\n                                       value={this.state.lemmapp}\r\n                                       options={lemmAppOptions} \r\n                                       onChange={this.handleChange}\r\n                                       search\r\n                                    />\r\n                                 </Form.Field>\r\n                                 <Modal\r\n                                    size='small'\r\n                                    closeIcon\r\n                                    trigger={<Button style={{ marginTop: \"17px\"}}>Lemmatizer options</Button>}\r\n                                    onOpen={this.handleModalOpen}\r\n                                    onClose={this.handleClose}\r\n                                    open={this.state.modalOpen}\r\n                                 >\r\n                                 <Header content='Lemmatizer options' />\r\n                                    <Modal.Content>\r\n                                       <Form>\r\n                                             <Form.Field inline>\r\n                                             <label><b>Alias lemmatization</b></label>\r\n                                             <input\r\n                                                name=\"aliaslem\"\r\n                                                style={{ marginLeft: \"100px\", minWidth: \"400px\"}} \r\n                                                placeholder=\"Enter alias lemmatization\"\r\n                                                onChange={this.handleInputChange}\r\n                                                value={this.state.aliaslem}\r\n                                             />\r\n                                             </Form.Field>\r\n                                             <Form.Field inline>\r\n                                             <label ><b>Negative aliases</b></label>\r\n                                             <input \r\n                                                name=\"negalias\" \r\n                                                style={{ marginLeft: \"122px\", minWidth: \"400px\"}}\r\n                                                placeholder=\"Enter negative alias\"\r\n                                                onChange={this.handleInputChange}\r\n                                                value={this.state.negalias}\r\n                                             />\r\n                                             </Form.Field>\r\n                                             <Form.Field inline>\r\n                                             <label ><b>Negative search boolean</b></label>\r\n                                             <Select \r\n                                                name=\"negsearchbool\" \r\n                                                style={{ marginLeft: \"73px\", minWidth: \"400px\"}}\r\n                                                value={this.state.negsearchbool}\r\n                                                options={negSearchBoolOptions} \r\n                                                onChange={this.handleChange}\r\n                                                search\r\n                                                placeholder=\"Enter negative search boolean\"\r\n                                             />\r\n                                             </Form.Field>\r\n                                             <Form.Field inline>\r\n                                             <label><b>Negative alias lemmatization</b></label>\r\n                                             <input \r\n                                                name=\"negaliaslemm\"\r\n                                                style={{ marginLeft: \"48px\", minWidth: \"400px\"}}\r\n                                                placeholder=\"Enter negative alias lemmatization\"\r\n                                                onChange={this.handleInputChange}\r\n                                                value={this.state.negaliaslemm}\r\n                                             />\r\n                                             </Form.Field>\r\n                                             <Form.Field inline>\r\n                                             <label ><b>Sentence without negative boolean</b></label>\r\n                                             <Radio\r\n                                                style={{ marginLeft: \"12px\"}}\r\n                                                toggle\r\n                                                name=\"senWoNegBool\"\r\n                                                onChange={(e, data) => {\r\n                                                   this.state.senWoNegBool = data.checked\r\n                                                }}\r\n                                                value={this.state.senWoNegBool}\r\n                                                defaultChecked = {this.state.senWoNegBool}\r\n                                             />\r\n                                             </Form.Field>\r\n                                       </Form>\r\n                                    </Modal.Content>\r\n                                    <Modal.Actions>\r\n                                       <Button color='red' onClick={this.handleClose}>\r\n                                          <Icon name='remove' /> Cancel\r\n                                       </Button>\r\n                                       <Button color='green' onClick={this.handleClose}>\r\n                                          <Icon name='checkmark' /> Confirm\r\n                                       </Button>\r\n                                    </Modal.Actions>\r\n                                 </Modal>\r\n                              </Form>\r\n\r\n                              <Grid.Column>\r\n                              <Form style={{marginLeft: \"58px\"}}>\r\n                              <Form.Field inline>\r\n                                 <label style={{ marginRight: \"30px\"}}>User</label>\r\n                                 <Input\r\n                                    name=\"user\"\r\n                                    style={{ marginLeft: \"25px\" }} \r\n                                    placeholder=\"Enter user\"\r\n                                    value={this.state.user}\r\n                                    onChange={this.handleInputChange}\r\n                                 />\r\n                              </Form.Field>\r\n                              <Form.Field inline>\r\n                                 <label >Email alert</label>\r\n                                 <Radio \r\n                                    toggle\r\n                                    name=\"emailAlert\"\r\n                                    style={{ marginLeft: \"15px\"}}\r\n                                    onChange={(e, data) => {\r\n                                    this.state.emailAlert = data.checked\r\n                                    }}\r\n                                    value={this.state.emailAlert}\r\n                                    defaultChecked\r\n                                 />\r\n                              </Form.Field>\r\n\r\n                              <Form.Field inline>\r\n                                 <label style={{ marginRight: \"25px\"}}>Alert title</label>\r\n                                 <Input \r\n                                    placeholder=\"Enter title\"\r\n                                    name=\"alertTitle\" \r\n                                    value={this.state.alertTitle}\r\n                                    onChange={this.handleInputChange}\r\n                                 />\r\n                              </Form.Field>\r\n                              \r\n                              <Form.Field inline>\r\n                                 <label style={{ marginRight: \"15px\"}}>Date added</label>\r\n                                 <input \r\n                                    type=\"date\" \r\n                                    min={currentDateTime.split(' ')[0]}\r\n                                    value={this.state.alertDate}\r\n                                    name=\"alertDate\"\r\n                                    onChange={this.handleInputChange}\r\n                                    />\r\n                              </Form.Field>\r\n\r\n                              <Button \r\n                                 primary \r\n                                 style={{ marginTop: \"10px\"}} \r\n                                 onClick={this.handleCreateClick}\r\n                                 disabled={this.state.createClicked}\r\n                              >\r\n                                 Save Updates\r\n                              </Button>\r\n                              </Form>\r\n                           </Grid.Column>\r\n                           </Grid.Row>\r\n                        </Grid>\r\n                  {this.state.alertCreationConfirmed && this.renderConfirmationResponseModal()}\r\n               </div>\r\n            )}\r\n            {this.state.createClicked && this.renderConfirmationModal()}\r\n         </div>\r\n      )\r\n   }\r\n\r\n   renderConfirmationResponseModal = () => {\r\n      console.log(\"inside renderConfirmationResponseModal\")\r\n      return (\r\n        <Modal\r\n          open={this.state.alertCreationConfirmed}\r\n          onClose={this.handleConfirmationResponseModalClose}\r\n          closeIcon\r\n          size='small'\r\n          >\r\n            <Modal.Content>\r\n              <h2 style={{ textAlign: 'center'}}>\r\n                Alert Updated! <Icon color=\"green\" name=\"check circle\" />\r\n              </h2>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n            <Button onClick={() => this.handleConfirmationResponseModalClose()}>\r\n              Close\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      )\r\n   }\r\n\r\n   handleConfirmationModalClose = () => {\r\n      this.setState({\r\n        createClicked: false\r\n      })\r\n    }\r\n\r\n   renderConfirmationModal = () => {\r\n      console.log(\"inside renderConfirmationModal\")\r\n      return (\r\n        <Modal\r\n          open={this.state.createClicked}\r\n          onClose={this.handleConfirmationModalClose}\r\n          closeIcon\r\n          size='small'\r\n          >\r\n            <Header>Confirm Alert</Header>\r\n            <Modal.Content>\r\n              <Form>\r\n                <Form.Field inline>\r\n                <label style={{ marginRight: \"20px\"}}>Email Subject</label>\r\n                <input\r\n                  name=\"emailSubject\"\r\n                  style={{ marginLeft: \"25px\", minWidth: \"400px\" }} \r\n                  placeholder=\"Enter email subject line\"\r\n                  value={this.state.emailSubject}\r\n                  onChange={this.handleInputChange}\r\n                />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                <label style={{ marginRight: \"77px\"}}>Heading</label>\r\n                  <Dropdown\r\n                    name= 'header'\r\n                    placeholder= 'Select header'\r\n                    selection\r\n                    search\r\n                    options={this.state.headingOptions} \r\n                    onChange={this.handleChange}\r\n                    value={this.state.header}\r\n                    allowAdditions\r\n                    onAddItem={this.handleHeadingAddition}\r\n                  />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                <label style={{ marginRight: \"55px\"}}>Sub heading</label>\r\n                <Dropdown\r\n                  name= 'subheader'\r\n                  placeholder= 'Select subheading'\r\n                  selection\r\n                  search\r\n                  options={this.state.subheadingOptions} \r\n                  onChange={this.handleChange}\r\n                  value={this.state.subheader}\r\n                  allowAdditions\r\n                  onAddItem={this.handleSubHeadingAddition}\r\n                />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                  <label style={{ marginRight: \"20px\"}}>Sub heading order</label>\r\n                  <input\r\n                    name=\"subheaderOrder\"\r\n                    placeholder=\"Select subheading order\"\r\n                    value={this.state.subheaderOrder}\r\n                    onChange={this.handleInputChange}\r\n                    style={{ width: \"195px\"}}\r\n                  />\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                  <label>Recepient List</label>\r\n                  <TextArea\r\n                    name=\"recepientList\"\r\n                    style={{ minHeight: 50 }} \r\n                    placeholder=\"Enter recepient list\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.recepientList}\r\n                  />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline>\r\n                  <label style={{ marginRight: \"55px\"}}>Frequency</label>\r\n                  {/* <Input value={this.state.frequency} /> */}\r\n                  <Dropdown\r\n                    name= 'frequency'\r\n                    placeholder= 'Select frequency'\r\n                    selection\r\n                    search\r\n                    options={this.state.frequencyOptions} \r\n                    onChange={this.handleChange}\r\n                    value={this.state.frequency}\r\n                    multiple\r\n                  />\r\n                </Form.Field>\r\n              </Form>\r\n\r\n              {/* Stuff like ordering sub headings */}\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n              <Button color='red' onClick={() => this.handleConfirmationModalClose()}>\r\n                <Icon name='remove' /> Cancel\r\n              </Button>\r\n              <Button color='green' onClick={() => this.handleConfirmClick()}>\r\n                <Icon name='checkmark' /> Confirm\r\n              </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      )\r\n   }\r\n\r\n   handleCreateClick = async() => {\r\n      console.log(\"Inside handleCreateClick\")\r\n      this.setState({\r\n        createClicked: true\r\n      })\r\n   }\r\n\r\n   handleConfirmationResponseModalClose = () => {\r\n      this.setState({ alertCreationConfirmed: false})\r\n   }\r\n\r\n   handleConfirmClick = async() => {\r\n      console.log(\"inside handleConfirmClick\")\r\n      //sending request to backend\r\n      const response = await axios\r\n      // .post('https://omealerts.herokuapp.com/', this.state)\\\r\n      .post('http://localhost:5000/update', this.state)\r\n      .catch(err => {\r\n        console.log(\"error in Axios request\", err.message);\r\n        toast.error(err.message, {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined\r\n        });\r\n        this.setState({\r\n          createClicked: false\r\n        })\r\n      })\r\n      console.log(\"response from create alert\", response);\r\n\r\n      if(response.status === 200) {\r\n        this.setState({\r\n          alertCreationConfirmed: true,\r\n          createClicked: false\r\n        })\r\n      }\r\n   }\r\n}","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Header.js",["153"],"import { Header, Button } from 'semantic-ui-react'\r\nimport { Component } from 'react'\r\n\r\nclass HeaderContent extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div style={{ display: \"inline\" }}>\r\n                <Header \r\n                    as='h2'\r\n                    style={{marginTop: \"30px\", marginBottom: \"30px\" }}\r\n                >\r\n                    User engagement\r\n                </Header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderContent;","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\modals\\SourceLinkModal.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\AccordianTitles.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\Trendline.js",["154","155","156","157"],"import React, { Component } from 'react';\r\nimport { Segment, Dimmer, Loader, Form, Dropdown, Button, Table, Header, Input, Divider } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\nimport axios from \"axios\";\r\nimport { VictoryChart, VictoryTheme, VictoryBar } from 'victory';\r\nimport IPDensity from './IPDensity';\r\n\r\nexport default class Trendline extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        loading: false,\r\n        date: null,\r\n        monthDateArray: [],\r\n        months: 0,\r\n        renderTrendline: true,\r\n        opensData: [],\r\n        clicksData: [],\r\n        allEngagementsData: [],\r\n        ipCountsData: []\r\n      };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      this.setState({\r\n        date: new Date()\r\n      })\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n      this.setState({\r\n        ...this.state,\r\n        [e.target.name]: e.target.value,\r\n      })\r\n    }\r\n\r\n    handleChange = (e, data) => {\r\n      this.setState({\r\n        ...this.state,\r\n        [data.name]: data.value\r\n      });\r\n    }\r\n\r\n    modifyDate = (monthNumber) => {\r\n      let date = moment().subtract(parseInt(monthNumber), 'months').format();\r\n      date = moment(date).utc()._i;\r\n      console.log(\"subtracted date\", date);\r\n      let datePart = date.split('T')[0];\r\n      let timePart = date.split('T')[1];\r\n\r\n      return datePart+\" \"+timePart;\r\n    }\r\n\r\n    prepareMonthDateArray = () => {\r\n      let monthDateArray = [];\r\n      for(let i=parseInt(this.state.months); i>=0; i--) {\r\n        monthDateArray.push(this.modifyDate(i))\r\n      }\r\n      return monthDateArray;\r\n    }\r\n\r\n    fetchTrendline = async() => {\r\n      let monthDateArray = this.prepareMonthDateArray();\r\n      console.log(\"monthDateArray\", monthDateArray)\r\n\r\n      this.setState({\r\n        monthDateArray,\r\n        loading: true\r\n      }, async() => {\r\n          let response = await axios\r\n          .post('http://localhost:5000/trendline', this.state)\r\n          .catch(err => {\r\n            console.log(\"error in Axios request\", err.message);\r\n          })\r\n  \r\n          console.log(\"response\", response)\r\n\r\n          let opensArray = response.data.opens;\r\n          let clicksArray = response.data.clicks;\r\n          let allEngagementsArray = response.data.all_engagements;\r\n          let ipCountsArray = response.data.ip_counts;\r\n\r\n          // let opensArray = [2723, 3548, 3519, 3378, 3028, 3233]\r\n          let opensData = this.prepareGraphData(opensArray)\r\n          console.log(\"opensData\", opensData)\r\n\r\n          let clicksData = this.prepareGraphData(clicksArray);\r\n          let allEngagementsData = this.prepareGraphData(allEngagementsArray);\r\n          let ipCountsData = this.prepareGraphData(ipCountsArray);\r\n\r\n          this.setState({\r\n            renderTrendline: true,\r\n            loading: false,\r\n            opensData,\r\n            clicksData,\r\n            allEngagementsData,\r\n            ipCountsData\r\n          })\r\n      })\r\n    }\r\n\r\n    prepareGraphData = (array) => {\r\n      let preparedData = [];\r\n      for(let i=0; i<array.length; i++) {\r\n        let object = {};\r\n        let date = moment().subtract(parseInt(array.length - i), 'months');\r\n        object.x = moment(date).format(\"MMM\");\r\n        object.y = array[i];\r\n\r\n        preparedData.push(object);\r\n      }\r\n      return preparedData;\r\n    }\r\n\r\n    renderOpensBarChart = () => {\r\n      return (\r\n        <Segment \r\n          placeholder \r\n          style={{ marginRight: \"60px\", marginTop: \"60px\", minHeight: \"550px\", minWidth: \"500px\", marginBottom: \"150px\"}}\r\n        >\r\n          <div style={{ \r\n            position: \"absolute\", \r\n            top: \"-10\", \r\n            marginLeft: \"100px\", \r\n            marginBottom: \"40px\", \r\n            marginRight: \"50px\",\r\n            marginTop: \"100px\"\r\n          }}>\r\n            <Header style={{ marginLeft: \"40px\", marginBottom: \"-20px\"}} as='h3'>Opens</Header>\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              domainPadding={60}\r\n              width={800}\r\n              height={500}\r\n            >\r\n              <VictoryBar\r\n                style={{ \r\n                  data: { fill: \"#c43a31\" },\r\n                  labels: {fontSize: 15, fontWeight: \"bold\"}\r\n                }}\r\n                labels={({ datum }) => `${datum.y}`}\r\n                data={this.state.opensData}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n      </Segment>\r\n      )\r\n    }\r\n\r\n    renderClicksBarChart = () => {\r\n        return (\r\n            <Segment \r\n             placeholder \r\n             style={{ marginRight: \"60px\", marginTop: \"60px\", minHeight: \"550px\", minWidth: \"500px\", marginBottom: \"150px\"}}\r\n            >\r\n            <div style={{ \r\n              position: \"absolute\", \r\n              top: \"-10\", \r\n              marginLeft: \"100px\", \r\n              marginBottom: \"40px\", \r\n              marginRight: \"50px\",\r\n              marginTop: \"100px\"\r\n            }}>\r\n              <Header style={{ marginLeft: \"40px\", marginBottom: \"-20px\"}} as='h3'>Clicks</Header>\r\n              <VictoryChart\r\n                theme={VictoryTheme.material}\r\n                domainPadding={60}\r\n                width={800}\r\n                height={500}\r\n              >\r\n                <VictoryBar\r\n                  style={{ \r\n                    data: { fill: \"#c43a31\" },\r\n                    labels: {fontSize: 15, fontWeight: \"bold\"}\r\n                  }}\r\n                  labels={({ datum }) => `${datum.y}`}\r\n                  data={this.state.clicksData}\r\n                />\r\n              </VictoryChart>\r\n            </div>\r\n        </Segment>\r\n        )\r\n    }\r\n\r\n    renderAllEngagementsBarChart = () => {\r\n        return (\r\n            <Segment \r\n              placeholder \r\n              style={{ marginRight: \"60px\", marginTop: \"60px\", minHeight: \"550px\", minWidth: \"500px\", marginBottom: \"150px\"}}\r\n            >\r\n            \r\n            <div style={{ \r\n             position: \"absolute\", \r\n             top: \"-10\", \r\n             marginLeft: \"100px\", \r\n             marginBottom: \"15px\", \r\n             marginRight: \"50px\",\r\n             marginTop: \"100px\"\r\n            }}>\r\n            <Header style={{ marginLeft: \"40px\", marginBottom: \"-20px\"}} as='h3'>All Engagements</Header>\r\n            <VictoryChart\r\n              theme={VictoryTheme.material}\r\n              domainPadding={60}\r\n              width={800}\r\n              height={500}\r\n            >\r\n              <VictoryBar\r\n                style={{ \r\n                  data: { fill: \"#c43a31\" },\r\n                  labels: {fontSize: 15, fontWeight: \"bold\"}\r\n                }}\r\n                labels={({ datum }) => `${datum.y}`}\r\n                data={this.state.allEngagementsData}\r\n              />\r\n            </VictoryChart>\r\n          </div>\r\n      </Segment>\r\n        )\r\n    }\r\n\r\n    renderIPCountsBarChart = () => {\r\n      return (\r\n          <Segment \r\n            placeholder \r\n            style={{ marginRight: \"60px\", marginTop: \"60px\", minHeight: \"550px\", minWidth: \"500px\", marginBottom: \"150px\"}}\r\n          >\r\n          \r\n          <div style={{ \r\n           position: \"absolute\", \r\n           top: \"-10\", \r\n           marginLeft: \"100px\", \r\n           marginBottom: \"15px\", \r\n           marginRight: \"50px\",\r\n           marginTop: \"100px\"\r\n          }}>\r\n          <Header style={{ marginLeft: \"40px\", marginBottom: \"-20px\"}} as='h3'>IP Counts</Header>\r\n          <VictoryChart\r\n            theme={VictoryTheme.material}\r\n            domainPadding={60}\r\n            width={800}\r\n            height={500}\r\n          >\r\n            <VictoryBar\r\n              style={{ \r\n                data: { fill: \"#c43a31\" },\r\n                labels: {fontSize: 15, fontWeight: \"bold\"}\r\n              }}\r\n              labels={({ datum }) => `${datum.y}`}\r\n              data={this.state.ipCountsData}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n    </Segment>\r\n      )\r\n  }\r\n\r\n    render() {\r\n      //console.log(\"state\", this.state);  \r\n      return (\r\n        <div style={{ marginLeft: \"50px\", alignItems: \"center\" }}>\r\n          {this.state.loading && (\r\n            <Segment style={{ marginTop: '40px', height: '400px', marginRight: \"50px\"}}>\r\n              <Dimmer active inverted>\r\n                <Loader inverted content='Loading' />\r\n              </Dimmer>\r\n            </Segment>\r\n          )}\r\n          {!this.state.loading && (\r\n            <div style={{ marginRight: \"100px\"}}>\r\n              <Form>\r\n                <Form.Field inline>\r\n                  <label style={{marginLeft: \"-27px\"}}>Months</label>\r\n                  <Input \r\n                    type=\"number\" \r\n                    id=\"months\" \r\n                    name=\"months\"\r\n                    min=\"0\" \r\n                    max=\"100\"\r\n                    value={this.state.months}\r\n                    onChange={this.handleInputChange}\r\n                    style={{ minWidth: \"240px\"}}\r\n                  />\r\n                </Form.Field>\r\n\r\n                <Form.Field inline style={{ display: \"inline\", float: \"right\", marginRight: \"65px\", marginTop: \"-55px\"}}>\r\n                  <Button primary onClick={this.fetchTrendline}>Fetch Trendline</Button>\r\n                </Form.Field>\r\n              </Form>\r\n              {this.state.opensData.length>1 && (this.renderOpensBarChart())}\r\n              {this.state.clicksData.length>1 && (this.renderClicksBarChart())}\r\n              {this.state.allEngagementsData.length>1 && (this.renderAllEngagementsBarChart())}\r\n              {this.state.ipCountsData.length>1 && (this.renderIPCountsBarChart())}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n      }\r\n}","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\UserEngagement_FE\\src\\components\\IPDensity.js",["158","159","160","161"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\index.js",[],["162","163"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\App.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\history.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\components\\Home.js",["164","165"],"import React, { Component } from 'react';\r\nimport { Segment, Dimmer, Loader, Form, Dropdown, Button, Table, Header, Divider, Card } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\nimport HeaderContent from './Header';\r\nimport axios from \"axios\";\r\nimport CurationsPie from './CurationsPie';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        loading: false,\r\n        date: \"\",\r\n        formattedDate: \"\",\r\n        removedPieDate: \"\",\r\n        oneWeekAgoRemovedPieDate: \"\",\r\n        removed_documents: [],\r\n        totalRemovedCount: 0\r\n      };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      const currentDate = moment().format('YYYY-MM-DD');\r\n      const currentTime = moment().format('HH:mm')\r\n      const currentDateTime = `${currentDate}T${currentTime}`\r\n      console.log('currentDateTime', currentDateTime);\r\n\r\n      this.setState({\r\n        date: currentDateTime,\r\n        removedPieDate: currentDateTime,\r\n        formattedDate: currentDate.split('T')[0]\r\n      })\r\n    }\r\n\r\n    prepareResponse = (data) => {\r\n      let removedDocumentArray = [];\r\n      let totalCount = 0;\r\n      for(let doc of data) {\r\n        let object = {};\r\n        object.removal_cause = doc[0];\r\n        object.count = doc[1];\r\n        removedDocumentArray.push(object);\r\n\r\n        totalCount += doc[1];\r\n      }\r\n\r\n      return { removedDocumentArray, totalCount };\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n      this.setState({\r\n        ...this.state,\r\n        [e.target.name]: e.target.value,\r\n        formattedDate: e.target.value.split('T')[0]\r\n      })\r\n    }\r\n\r\n    renderRemovedDocAnalysisTable = () => {\r\n      console.log(\"inside rederRemovedDocAnalysisTable\")\r\n      let removedDocs = this.state.removed_documents;\r\n      return (\r\n        <div style={{ marginTop: \"60px\"}}>\r\n          <Header as='h3'>Removed Document Analysis</Header>\r\n          <Table \r\n            singleLine \r\n            striped \r\n            style={{ overflowY: \"scroll\", height: \"300px\", width: \"720px\", display: \"block\"}}\r\n          >\r\n          <Table.Header style={{position: \"sticky\", top: 0, zIndex: 1}}>\r\n            <Table.Row>\r\n              <Table.HeaderCell textAlign=\"center\">Removal cause</Table.HeaderCell>\r\n              <Table.HeaderCell textAlign=\"center\">Document count</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {removedDocs.length === 0 && (\r\n              <Table.Row>\r\n                <Table.Cell colspan=\"2\">\r\n                    <center>Removed causes not available for this time frame</center>\r\n                </Table.Cell>\r\n              </Table.Row>\r\n            )}\r\n            {removedDocs.length > 0 && \r\n              removedDocs.map((curr, index) => (\r\n                <Table.Row key={index}>\r\n                    <Table.Cell textAlign=\"center\">\r\n                      {removedDocs[index].removal_cause}\r\n                    </Table.Cell>\r\n                    <Table.Cell textAlign=\"center\">\r\n                      {removedDocs[index].count}\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n              ))\r\n            }\r\n            <Table.Row>\r\n              <Table.Cell textAlign=\"center\">\r\n                Total\r\n              </Table.Cell>\r\n              <Table.Cell textAlign=\"center\">\r\n                {this.state.totalRemovedCount}\r\n              </Table.Cell>\r\n            </Table.Row>\r\n            </Table.Body>\r\n          </Table>\r\n        </div>   \r\n      )\r\n    }\r\n\r\n    fetchRemovedDocuments = async() => {\r\n      this.setState({\r\n        loading: true\r\n      }, async() => {\r\n        let response = await axios\r\n        .post('http://localhost:5000/', this.state);\r\n        console.log(\"response\", response)\r\n        let preparedResponse = this.prepareResponse(response.data.removed_documents);\r\n        console.log(\"removedDocArray\", preparedResponse.removedDocumentArray) \r\n        this.setState({\r\n          ...this.state,\r\n          removed_documents: preparedResponse.removedDocumentArray,\r\n          totalRemovedCount: preparedResponse.totalCount,\r\n          loading: false\r\n        })\r\n      })\r\n    }\r\n\r\n    modifyDate = (givenDate) => {\r\n      let date = moment(new Date(givenDate)).subtract(7, \"days\").format();\r\n      date = moment(date).utc()._i;\r\n      let datePart = date.split('T')[0];\r\n      console.log(\"datePart\", datePart);\r\n\r\n      return datePart;\r\n    }\r\n\r\n    render() {\r\n      console.log(\"state in Home\", this.state)\r\n      return (\r\n        <div style={{ marginLeft: \"50px\", alignItems: \"center\"  }}>\r\n          {this.state.loading && (\r\n            <Segment style={{ marginTop: '40px', height: '400px', marginRight: \"50px\"}}>\r\n              <Dimmer active inverted>\r\n                <Loader inverted content='Loading' />\r\n              </Dimmer>\r\n            </Segment>\r\n          )}\r\n          {!this.state.loading && (\r\n            <div style={{ marginRight: \"100px\"}}>\r\n              <HeaderContent />\r\n              <Form>\r\n                <Form.Field inline>\r\n                  <label style={{ marginRight: \"15px\"}}>Date range</label>\r\n                  <input \r\n                    type=\"datetime-local\" \r\n                    value={this.state.date}\r\n                    name=\"date\"\r\n                    onChange={this.handleInputChange}\r\n                    step=\"1\"\r\n                  />\r\n                  <Button style={{ marginLeft: \"20px\"}} primary onClick={this.fetchRemovedDocuments}>Fetch Removed Documents</Button>\r\n                </Form.Field>\r\n              </Form>\r\n              {this.state.removed_documents.length>1 && this.renderRemovedDocAnalysisTable()}\r\n              <Divider />\r\n              <CurationsPie />\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n      }\r\n}","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\components\\Header.js",["166"],"import { Header, Button } from 'semantic-ui-react'\r\nimport { Component } from 'react'\r\n\r\nclass HeaderContent extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div style={{ display: \"inline\" }}>\r\n                <Header \r\n                    as='h2'\r\n                    style={{marginTop: \"30px\", marginBottom: \"30px\" }}\r\n                >\r\n                    Automation Impacts Curation efforts\r\n                </Header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderContent;","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Curation_efforts\\src\\components\\CurationsPie.js",["167","168","169","170","171","172"],"import React, { Component } from 'react';\r\nimport { Segment, Dimmer, Loader, Form, Dropdown, Button, Table, Header, Divider, Card } from 'semantic-ui-react'\r\nimport moment from 'moment';\r\nimport HeaderContent from './Header';\r\nimport axios from \"axios\";\r\nimport { VictoryPie, VictoryLabel } from 'victory';\r\n\r\nexport default class CurationsPie extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        loading: false,\r\n        date: \"\",\r\n        formattedDate: \"\",\r\n        removedPieDate: \"\",\r\n        oneWeekAgoRemovedPieDate: \"\",\r\n        removed_documents: [],\r\n        totalRemovedCount: 0,\r\n        userGroupOptions: [],\r\n        userGroupSelected: \"\",\r\n        userGroupArray: [],\r\n        metaPrevArray: [],\r\n        prevArray: [],\r\n        prevAlertTitlevsType: []\r\n      };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n      const currentDate = moment().format('YYYY-MM-DD');\r\n      const currentTime = moment().format('HH:mm')\r\n      const currentDateTime = `${currentDate}T${currentTime}`\r\n      console.log('currentDateTime', currentDateTime);\r\n\r\n      const userGroupOptions = [\r\n        { key: 'MYRTLE', value: 'MYRTLE', text: 'MYRTLE' },\r\n        { key: 'NWSLTR', value: 'NWSLTR', text: 'NWSLTR' },\r\n        { key: 'MYO_CI', value: 'MYO_CI', text: 'MYO_CI' },\r\n        { key: 'MASAYUKI', value: 'MASAYUKI', text: 'MASAYUKI' },\r\n        { key: 'DSP_GBD', value: 'DSP_GBD', text: 'DSP_GBD' },\r\n        { key: 'KENTON_STEWART', value: 'KENTON_STEWART', text: 'KENTON_STEWART' },\r\n        { key: 'CHRIS_SCHAUMBURG', value: 'CHRIS_SCHAUMBURG', text: 'CHRIS_SCHAUMBURG' },\r\n        { key: 'JASMINE_CARVALHO', value: 'JASMINE_CARVALHO', text: 'JASMINE_CARVALHO' },\r\n        { key: 'MARK_NIEMASZEK', value: 'MARK_NIEMASZEK', text: 'MARK_NIEMASZEK' },\r\n        { key: 'YUVAL_HAREL', value: 'YUVAL_HAREL', text: 'YUVAL_HAREL' },\r\n        { key: 'JENNY_ALLTOFT', value: 'JENNY_ALLTOFT', text: 'JENNY_ALLTOFT' },\r\n        { key: 'MASATO_YABUKI', value: 'MASATO_YABUKI', text: 'MASATO_YABUKI' },\r\n        { key: 'GAELLE_MERCENNE', value: 'GAELLE_MERCENNE', text: 'GAELLE_MERCENNE' },\r\n        { key: 'JINNY_LEE', value: 'JINNY_LEE', text: 'JINNY_LEE' },\r\n        { key: 'ERNEST_DUAH', value: 'ERNEST_DUAH', text: 'ERNEST_DUAH' },\r\n        { key: 'HAYES_DANSKY', value: 'HAYES_DANSKY', text: 'HAYES_DANSKY' },\r\n        { key: 'JIM_LUTERMAN', value: 'JIM_LUTERMAN', text: 'JIM_LUTERMAN' },\r\n        { key: 'ALAN_MENAGED', value: 'ALAN_MENAGED', text: 'ALAN_MENAGED' },\r\n        { key: 'FULL_UROVANT', value: 'FULL_UROVANT', text: 'FULL_UROVANT' },\r\n        { key: 'SUNOVION_MDD', value: 'SUNOVION_MDD', text: 'SUNOVION_MDD' },\r\n        { key: 'SMPA_RESEARCH', value: 'SMPA_RESEARCH', text: 'SMPA_RESEARCH' },\r\n        { key: 'UROVANT_MARKET_ACCESS', value: 'UROVANT_MARKET_ACCESS', text: 'UROVANT_MARKET_ACCESS' },\r\n      ];\r\n\r\n      const userGroupArray = [\r\n        'NWSLTR',\r\n        'MYO_CI',\r\n        'MASAYUKI',\r\n        'DSP_GBD',\r\n        'KENTON_STEWART',\r\n        'CHRIS_SCHAUMBURG',\r\n        'JASMINE_CARVALHO',\r\n        'MARK_NIEMASZEK',\r\n        'YUVAL_HAREL',\r\n        'MYRTLE',\r\n        'JENNY_ALLTOFT',\r\n        'MASATO_YABUKI',\r\n        'UROVANT_MARKET_ACCESS',  \r\n        'GAELLE_MERCENNE',\r\n        'JINNY_LEE',\r\n        'ERNEST_DUAH',\r\n        'JIM_LUTERMAN',\r\n        'ALAN_MENAGED',\r\n        'FULL_UROVANT',\r\n        'SUNOVION_MDD',\r\n        'SMPA_RESEARCH'\r\n      ]\r\n\r\n      this.setState({\r\n        date: currentDateTime,\r\n        removedPieDate: currentDateTime,\r\n        formattedDate: currentDate.split('T')[0],\r\n        userGroupOptions,\r\n        userGroupArray\r\n      })\r\n    }\r\n\r\n    prepareResponse = (data) => {\r\n      let removedDocumentArray = [];\r\n      let totalCount = 0;\r\n      for(let doc of data) {\r\n        let object = {};\r\n        object.removal_cause = doc[0];\r\n        object.count = doc[1];\r\n        removedDocumentArray.push(object);\r\n\r\n        totalCount += doc[1];\r\n      }\r\n\r\n      return { removedDocumentArray, totalCount };\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n      this.setState({\r\n        ...this.state,\r\n        [e.target.name]: e.target.value,\r\n        formattedDate: e.target.value.split('T')[0]\r\n      })\r\n    }\r\n\r\n    modifyDate = (givenDate) => {\r\n      let date = moment(new Date(givenDate)).subtract(7, \"days\").format();\r\n      date = moment(date).utc()._i;\r\n      let datePart = date.split('T')[0] + \"T00:00\";\r\n      // console.log(\"datePart\", datePart);\r\n\r\n      return datePart;\r\n    }\r\n \r\n    fetchMETAPrevCurations = async() => {\r\n      this.setState({\r\n        loading: true,\r\n        oneWeekAgoRemovedPieDate: this.modifyDate(this.state.removedPieDate)\r\n      }, async() => {\r\n        let response = await axios\r\n        .post('http://localhost:5000/meta_prev', this.state);\r\n        console.log(\"response\", response)\r\n\r\n        this.setState({\r\n          ...this.state,\r\n          metaPrevArray: response.data,\r\n          loading: false\r\n        })\r\n      })\r\n    }\r\n\r\n    preparePrevArray = (prevObject) => {\r\n      let prevArray = [];\r\n      for (const property in prevObject) {\r\n        let obj = {};\r\n        obj.x = property;\r\n        obj.y = prevObject[property]\r\n        //console.log(`${property}: ${object[property]}`);\r\n\r\n        prevArray.push(obj);\r\n      }\r\n\r\n      return prevArray;\r\n    }\r\n\r\n    preparePrevAlertvsType = (prevObject) => {\r\n      let prevArray = [];\r\n      for (const property in prevObject) {\r\n        let obj = {};\r\n        let alertTitle = property.split(':')[0];\r\n        let type = property.split(':')[1];\r\n\r\n        obj.x = alertTitle;\r\n        obj.y = type\r\n        prevArray.push(obj);\r\n      }\r\n\r\n      return prevArray;\r\n    }\r\n\r\n    fetchPrevCurations = async() => {\r\n      this.setState({\r\n        loading: true,\r\n        oneWeekAgoRemovedPieDate: this.modifyDate(this.state.removedPieDate)\r\n      }, async() => {\r\n        let response = await axios\r\n        .post('http://localhost:5000/prev', this.state);\r\n        console.log(\"response\", response)\r\n\r\n        this.setState({\r\n          ...this.state,\r\n          prevAlertTitlevsType: this.preparePrevAlertvsType(response.data),\r\n          prevArray: this.preparePrevArray(response.data),\r\n          loading: false\r\n        })\r\n      })\r\n    }\r\n\r\n    handleChange = (e, data) => {\r\n      this.setState({\r\n        ...this.state,\r\n        [data.name]: data.value\r\n      });\r\n    };\r\n\r\n    renderMETAPrevPie = () => {\r\n      return (\r\n        <div style={{ marginTop: \"50px\", marginLeft: \"50px\"}}>\r\n          <Header as='h3'>META Previous Curations Pie chart</Header>\r\n          {/* <div style={{ width: \"600px\", height: \"700px\", top: 30, left: 120, position: \"relative\", padding: \"50px\"}}> \r\n            <VictoryPie\r\n              data={this.state.metaPrevArray}\r\n              labels={({ datum }) => `${datum.x}`}\r\n              labelPosition={({ index }) => index\r\n                ? \"centroid\"\r\n                : \"startAngle\"\r\n              }\r\n              labelPlacement= \"parallel\"\r\n              colorScale={[ \"tomato\", \"orange\", \"gold\", \"cyan\", \"navy\" ]}\r\n              // data={[\r\n              //   { x: \"Cats\", y: 35 },\r\n              //   { x: \"Dogs\", y: 40 },\r\n              //   { x: \"Birds\", y: 55 }\r\n              // ]}\r\n              style={{ labels: { padding: 30 } }}\r\n            />\r\n          </div>       */}\r\n          <svg viewBox=\"0 0 400 500\">\r\n            <VictoryPie\r\n              standalone={false}\r\n              width={300} height={500}\r\n              data={this.state.metaPrevArray}\r\n              // labelRadius={50}\r\n              labels={({ datum }) => `${datum.x}(${datum.y}%)`}\r\n              labelPosition={({ index }) => index\r\n                ? \"centroid\"\r\n                : \"startAngle\"\r\n              }\r\n              labelPlacement= \"parallel\"\r\n              colorScale={[ \"tomato\", \"orange\", \"cyan\", \"navy\", \"gold\" ]}\r\n              style={{ labels: { fontSize: 6} }}\r\n            />\r\n          </svg>\r\n        </div>\r\n      )\r\n    }\r\n\r\n    renderPrevPie = () => {\r\n      return (\r\n        <div style={{ marginTop: \"20px\"}}>\r\n          <Header as='h3'>Previous Curations Pie chart for {this.state.userGroupSelected}</Header>\r\n          <div style={{ width: \"500px\", height: \"900px\", top: -130, left: 120, position: \"relative\"}}> \r\n            <VictoryPie\r\n              data={this.state.prevArray}\r\n              labels={({ datum }) => `${datum.x}`}\r\n              labelPosition={({ index }) => index\r\n                ? \"centroid\"\r\n                : \"startAngle\"\r\n              }\r\n              labelPlacement={({ index }) => index\r\n                ? \"parallel\"\r\n                : \"vertical\"\r\n              }\r\n              colorScale={[\"tomato\", \"orange\", \"gold\", \"cyan\", \"navy\" ]}\r\n              // data={[\r\n              //   { x: \"Cats\", y: 35 },\r\n              //   { x: \"Dogs\", y: 40 },\r\n              //   { x: \"Birds\", y: 55 }\r\n              // ]}\r\n            />\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n    renderPrevTable = () => {\r\n      console.log(\"inside render Prev table\")\r\n      let prevArray = this.state.prevArray;\r\n      return (\r\n        <div style={{ marginTop: \"60px\", marginBottom: \"30px\"}}>\r\n          <Header as='h3'>Previous Curations for {this.state.userGroupSelected}</Header>\r\n          <Table \r\n            singleLine \r\n            striped \r\n            style={{ overflowY: \"scroll\", height: \"300px\", width: \"950px\", display: \"block\", marginBottom: \"30px\"}}\r\n          >\r\n          <Table.Header style={{position: \"sticky\", top: 0, zIndex: 1}}>\r\n            <Table.Row>\r\n              <Table.HeaderCell textAlign=\"center\">Alert title</Table.HeaderCell>\r\n              <Table.HeaderCell textAlign=\"center\">Count</Table.HeaderCell>\r\n              <Table.HeaderCell textAlign=\"center\">Overall %</Table.HeaderCell>\r\n              <Table.HeaderCell textAlign=\"center\">Type %</Table.HeaderCell>\r\n              <Table.HeaderCell textAlign=\"center\">Alert & Type %</Table.HeaderCell>\r\n            </Table.Row>\r\n          </Table.Header>\r\n\r\n          <Table.Body>\r\n            {prevArray.length > 0 && \r\n              prevArray.map((curr, index) => (\r\n                <Table.Row key={index}>\r\n                    <Table.Cell textAlign=\"center\">\r\n                      {prevArray[index].x}\r\n                    </Table.Cell>\r\n                    <Table.Cell textAlign=\"center\">\r\n                      {prevArray[index].y}\r\n                    </Table.Cell>\r\n                    <Table.Cell textAlign=\"center\">\r\n                      {/* Count of each title / total rows in table */}\r\n                      {((prevArray[index].y/prevArray.length)*100).toFixed(2)}\r\n                    </Table.Cell>\r\n                    <Table.Cell textAlign=\"center\">\r\n                      {/* Count of each title / total count of rows with current index's type */}\r\n                      {((prevArray[index].y / this.returnTotalTypeCount(prevArray[index].x.split(':')[1])) * 100).toFixed(2)}\r\n                    </Table.Cell>\r\n                    <Table.Cell textAlign=\"center\">\r\n                      {/* Count of each title / total count of rows with current index's type as well as current index containing the alert type*/}\r\n                      {((prevArray[index].y / this.returnTotalAlertTypeCount(this.state.userGroupSelected, prevArray[index].x.split(':')[1])) * 100).toFixed(2)}\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n              ))\r\n            }\r\n            </Table.Body>\r\n          </Table>\r\n        </div>   \r\n      )\r\n    }\r\n\r\n    returnTotalTypeCount = (indexType) => {\r\n      console.log(\"indexType\", indexType)\r\n      let count = 0;\r\n      for(let object of this.state.prevAlertTitlevsType) {\r\n        if(object.y==indexType) {\r\n          count++;\r\n        }\r\n      }\r\n\r\n      return count;\r\n    }\r\n\r\n    returnTotalAlertTypeCount = (alertGroup, indexType) => {\r\n      console.log(\"indexType\", indexType)\r\n      console.log(\"alertGroup\", alertGroup)\r\n      let count = 0;\r\n      for(let object of this.state.prevAlertTitlevsType) {\r\n        console.log(\"object\", object)\r\n        if(object.x.includes(alertGroup) && object.y==indexType) {\r\n          count++;\r\n        }\r\n      }\r\n\r\n      console.log(\"count\", count)\r\n      return count;\r\n    }\r\n\r\n    render() {\r\n      console.log(\"state in CurationsPie\", this.state)\r\n      return (\r\n        <div style={{ alignItems: \"center\"  }}>\r\n          {this.state.loading && (\r\n            <Segment style={{ marginTop: '40px', height: '400px', marginRight: \"50px\"}}>\r\n              <Dimmer active inverted>\r\n                <Loader inverted content='Loading' />\r\n              </Dimmer>\r\n            </Segment>\r\n          )}\r\n          {!this.state.loading && (\r\n            <div style={{ marginRight: \"100px\"}}>\r\n              <Form>\r\n                <Form.Field inline>\r\n                  <label style={{ marginRight: \"15px\"}}>Date range</label>\r\n                  <input \r\n                    type=\"datetime-local\" \r\n                    value={this.state.removedPieDate}\r\n                    name=\"removedPieDate\"\r\n                    onChange={this.handleInputChange}\r\n                    step=\"1\"\r\n                  />\r\n                  <Button style={{ marginLeft: \"20px\"}} primary onClick={this.fetchMETAPrevCurations}>Fetch META Previous Curations</Button>\r\n                </Form.Field>\r\n              </Form>\r\n              \r\n              {this.state.metaPrevArray.length>0 && this.renderMETAPrevPie()}\r\n\r\n              <Form>\r\n                <Form.Field inline>\r\n                  <label style={{ marginRight: \"15px\", marginTop: \"30px\"}}>User Group</label>\r\n                  <Dropdown\r\n                    name = 'userGroupSelected'\r\n                    placeholder='Select User group'   \r\n                    selection\r\n                    search\r\n                    options={this.state.userGroupOptions} \r\n                    onChange={this.handleChange}\r\n                    value={this.state.userGroupSelected}\r\n                  />\r\n                  <Button style={{ marginLeft: \"40px\"}} primary onClick={this.fetchPrevCurations}>Fetch Previous Curations for User Group</Button>\r\n                </Form.Field>\r\n              </Form>\r\n              <br />\r\n\r\n              {/* {this.state.prevArray.length>0 && this.renderPrevPie()} */}\r\n              {this.state.prevArray.length>0 && this.renderPrevTable()}\r\n              {/* {this.state.prevArray.length==0 && (\r\n                <div>\r\n                  Data fetched returned empty\r\n                </div>\r\n              )} */}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n      }\r\n}","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\index.js",[],["173","174"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\App.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\history.js",[],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\components\\Home.js",["175","176","177"],"C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\components\\Header.js",["178"],"import { Header, Button } from 'semantic-ui-react'\r\nimport { Component } from 'react'\r\n\r\nclass HeaderContent extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div style={{ display: \"inline\" }}>\r\n                <Header \r\n                    as='h2'\r\n                    style={{marginTop: \"30px\", marginBottom: \"30px\" }}\r\n                >\r\n                    EDA Integration\r\n                </Header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeaderContent;","C:\\Users\\Dhipauk.Joqim\\OneDrive - Sumitovant Biopharma\\Documents\\Projects\\Neo4j\\src\\components\\NeoVis.js",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":13},{"ruleId":"187","severity":1,"message":"188","line":81,"column":30,"nodeType":"189","messageId":"190","endLine":81,"endColumn":32},{"ruleId":"187","severity":1,"message":"188","line":102,"column":29,"nodeType":"189","messageId":"190","endLine":102,"endColumn":31},{"ruleId":"187","severity":1,"message":"188","line":118,"column":30,"nodeType":"189","messageId":"190","endLine":118,"endColumn":32},{"ruleId":"191","severity":1,"message":"192","line":427,"column":37,"nodeType":"193","endLine":427,"endColumn":95},{"ruleId":"191","severity":1,"message":"192","line":431,"column":37,"nodeType":"193","endLine":431,"endColumn":94},{"ruleId":"183","severity":1,"message":"194","line":6,"column":10,"nodeType":"185","messageId":"186","endLine":6,"endColumn":24},{"ruleId":"195","severity":1,"message":"196","line":38,"column":10,"nodeType":"197","messageId":"190","endLine":38,"endColumn":19},{"ruleId":"195","severity":1,"message":"198","line":52,"column":10,"nodeType":"197","messageId":"190","endLine":52,"endColumn":17},{"ruleId":"187","severity":1,"message":"188","line":106,"column":25,"nodeType":"189","messageId":"190","endLine":106,"endColumn":27},{"ruleId":"187","severity":1,"message":"188","line":117,"column":22,"nodeType":"189","messageId":"190","endLine":117,"endColumn":24},{"ruleId":"187","severity":1,"message":"188","line":123,"column":25,"nodeType":"189","messageId":"190","endLine":123,"endColumn":27},{"ruleId":"187","severity":1,"message":"188","line":129,"column":28,"nodeType":"189","messageId":"190","endLine":129,"endColumn":30},{"ruleId":"187","severity":1,"message":"188","line":135,"column":24,"nodeType":"189","messageId":"190","endLine":135,"endColumn":26},{"ruleId":"187","severity":1,"message":"188","line":141,"column":21,"nodeType":"189","messageId":"190","endLine":141,"endColumn":23},{"ruleId":"187","severity":1,"message":"188","line":147,"column":20,"nodeType":"189","messageId":"190","endLine":147,"endColumn":22},{"ruleId":"187","severity":1,"message":"188","line":153,"column":25,"nodeType":"189","messageId":"190","endLine":153,"endColumn":27},{"ruleId":"187","severity":1,"message":"188","line":159,"column":23,"nodeType":"189","messageId":"190","endLine":159,"endColumn":25},{"ruleId":"187","severity":1,"message":"188","line":169,"column":27,"nodeType":"189","messageId":"190","endLine":169,"endColumn":29},{"ruleId":"187","severity":1,"message":"188","line":180,"column":23,"nodeType":"189","messageId":"190","endLine":180,"endColumn":25},{"ruleId":"187","severity":1,"message":"188","line":182,"column":66,"nodeType":"189","messageId":"190","endLine":182,"endColumn":68},{"ruleId":"187","severity":1,"message":"188","line":196,"column":26,"nodeType":"189","messageId":"190","endLine":196,"endColumn":28},{"ruleId":"187","severity":1,"message":"188","line":198,"column":72,"nodeType":"189","messageId":"190","endLine":198,"endColumn":74},{"ruleId":"187","severity":1,"message":"188","line":204,"column":26,"nodeType":"189","messageId":"190","endLine":204,"endColumn":28},{"ruleId":"187","severity":1,"message":"188","line":206,"column":72,"nodeType":"189","messageId":"190","endLine":206,"endColumn":74},{"ruleId":"183","severity":1,"message":"199","line":500,"column":11,"nodeType":"185","messageId":"186","endLine":500,"endColumn":18},{"ruleId":"183","severity":1,"message":"200","line":506,"column":13,"nodeType":"185","messageId":"186","endLine":506,"endColumn":17},{"ruleId":"191","severity":1,"message":"192","line":660,"column":35,"nodeType":"193","endLine":660,"endColumn":134},{"ruleId":"191","severity":1,"message":"192","line":689,"column":38,"nodeType":"193","endLine":689,"endColumn":135},{"ruleId":"201","severity":1,"message":"202","line":775,"column":49,"nodeType":"203","messageId":"204","endLine":775,"endColumn":59},{"ruleId":"201","severity":1,"message":"202","line":788,"column":49,"nodeType":"203","messageId":"204","endLine":788,"endColumn":59},{"ruleId":"201","severity":1,"message":"202","line":801,"column":49,"nodeType":"203","messageId":"204","endLine":801,"endColumn":59},{"ruleId":"201","severity":1,"message":"202","line":814,"column":49,"nodeType":"203","messageId":"204","endLine":814,"endColumn":59},{"ruleId":"201","severity":1,"message":"202","line":849,"column":46,"nodeType":"203","messageId":"204","endLine":849,"endColumn":56},{"ruleId":"201","severity":1,"message":"202","line":862,"column":46,"nodeType":"203","messageId":"204","endLine":862,"endColumn":56},{"ruleId":"201","severity":1,"message":"202","line":875,"column":46,"nodeType":"203","messageId":"204","endLine":875,"endColumn":56},{"ruleId":"201","severity":1,"message":"202","line":888,"column":46,"nodeType":"203","messageId":"204","endLine":888,"endColumn":56},{"ruleId":"201","severity":1,"message":"202","line":976,"column":52,"nodeType":"203","messageId":"204","endLine":976,"endColumn":62},{"ruleId":"201","severity":1,"message":"202","line":1014,"column":37,"nodeType":"203","messageId":"204","endLine":1014,"endColumn":47},{"ruleId":"183","severity":1,"message":"205","line":1,"column":18,"nodeType":"185","messageId":"186","endLine":1,"endColumn":24},{"ruleId":"183","severity":1,"message":"206","line":2,"column":41,"nodeType":"185","messageId":"186","endLine":2,"endColumn":49},{"ruleId":"183","severity":1,"message":"207","line":2,"column":59,"nodeType":"185","messageId":"186","endLine":2,"endColumn":64},{"ruleId":"183","severity":1,"message":"208","line":2,"column":81,"nodeType":"185","messageId":"186","endLine":2,"endColumn":88},{"ruleId":"183","severity":1,"message":"209","line":6,"column":8,"nodeType":"185","messageId":"186","endLine":6,"endColumn":17},{"ruleId":"183","severity":1,"message":"206","line":2,"column":41,"nodeType":"185","messageId":"186","endLine":2,"endColumn":49},{"ruleId":"183","severity":1,"message":"207","line":2,"column":59,"nodeType":"185","messageId":"186","endLine":2,"endColumn":64},{"ruleId":"183","severity":1,"message":"210","line":2,"column":74,"nodeType":"185","messageId":"186","endLine":2,"endColumn":79},{"ruleId":"211","severity":2,"message":"212","line":164,"column":16,"nodeType":"213","messageId":"214","endLine":164,"endColumn":27},{"ruleId":"179","replacedBy":"215"},{"ruleId":"181","replacedBy":"216"},{"ruleId":"183","severity":1,"message":"206","line":2,"column":41,"nodeType":"185","messageId":"186","endLine":2,"endColumn":49},{"ruleId":"183","severity":1,"message":"217","line":2,"column":83,"nodeType":"185","messageId":"186","endLine":2,"endColumn":87},{"ruleId":"183","severity":1,"message":"205","line":1,"column":18,"nodeType":"185","messageId":"186","endLine":1,"endColumn":24},{"ruleId":"183","severity":1,"message":"208","line":2,"column":74,"nodeType":"185","messageId":"186","endLine":2,"endColumn":81},{"ruleId":"183","severity":1,"message":"217","line":2,"column":83,"nodeType":"185","messageId":"186","endLine":2,"endColumn":87},{"ruleId":"183","severity":1,"message":"218","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":21},{"ruleId":"183","severity":1,"message":"219","line":6,"column":22,"nodeType":"185","messageId":"186","endLine":6,"endColumn":34},{"ruleId":"187","severity":1,"message":"188","line":321,"column":20,"nodeType":"189","messageId":"190","endLine":321,"endColumn":22},{"ruleId":"187","severity":1,"message":"188","line":335,"column":53,"nodeType":"189","messageId":"190","endLine":335,"endColumn":55},{"ruleId":"179","replacedBy":"220"},{"ruleId":"181","replacedBy":"221"},{"ruleId":"183","severity":1,"message":"222","line":2,"column":41,"nodeType":"185","messageId":"186","endLine":2,"endColumn":46},{"ruleId":"183","severity":1,"message":"223","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":14},{"ruleId":"183","severity":1,"message":"224","line":5,"column":8,"nodeType":"185","messageId":"186","endLine":5,"endColumn":13},{"ruleId":"183","severity":1,"message":"205","line":1,"column":18,"nodeType":"185","messageId":"186","endLine":1,"endColumn":24},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"no-unused-vars","'Error' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ToastContainer' is defined but never used.","no-dupe-keys","Duplicate key 'alertDate'.","ObjectExpression","Duplicate key 'loading'.","'headers' is assigned a value but never used.","'text' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Button' is defined but never used.","'Dropdown' is defined but never used.","'Table' is defined but never used.","'Divider' is defined but never used.","'IPDensity' is defined but never used.","'Input' is defined but never used.","react/jsx-no-undef","'CustomChart' is not defined.","JSXIdentifier","undefined",["225"],["226"],"'Card' is defined but never used.","'HeaderContent' is defined but never used.","'VictoryLabel' is defined but never used.",["225"],["226"],"'Image' is defined but never used.","'moment' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]